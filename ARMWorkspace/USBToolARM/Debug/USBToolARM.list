
USBToolARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008144  08008144  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08008144  08008144  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008144  08008144  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800814c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  200000b4  08008200  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aac  08008200  00020aac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011362  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303a  00000000  00000000  0003143f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00034480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00035488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5a1  00000000  00000000  00036308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001362e  00000000  00000000  000508a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd8a  00000000  00000000  00063ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0c61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d4  00000000  00000000  000f0cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800805c 	.word	0x0800805c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	0800805c 	.word	0x0800805c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Port_ResetCPU>:
#define RUN_CPU GPIO_PIN_15

static void set_address(int value);

void Port_ResetCPU()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
	int k = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOB, RESET_CPU, GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800016c:	480b      	ldr	r0, [pc, #44]	; (800019c <Port_ResetCPU+0x40>)
 800016e:	f001 f8f9 	bl	8001364 <HAL_GPIO_WritePin>

	while (k < 2)
 8000172:	e00a      	b.n	800018a <Port_ResetCPU+0x2e>
	{
		HAL_GPIO_TogglePin(GPIOB, RESET_CPU);
 8000174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <Port_ResetCPU+0x40>)
 800017a:	f001 f90b 	bl	8001394 <HAL_GPIO_TogglePin>
		delay_us(1);
 800017e:	2001      	movs	r0, #1
 8000180:	f000 fbe0 	bl	8000944 <delay_us>
		k++;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	3301      	adds	r3, #1
 8000188:	607b      	str	r3, [r7, #4]
	while (k < 2)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2b01      	cmp	r3, #1
 800018e:	ddf1      	ble.n	8000174 <Port_ResetCPU+0x18>
	}
}
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010c00 	.word	0x40010c00

080001a0 <Port_ProgramCPU>:

void Port_ProgramCPU()
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RUN_CPU, GPIO_PIN_RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001aa:	4808      	ldr	r0, [pc, #32]	; (80001cc <Port_ProgramCPU+0x2c>)
 80001ac:	f001 f8da 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ONE_STEP, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b6:	4805      	ldr	r0, [pc, #20]	; (80001cc <Port_ProgramCPU+0x2c>)
 80001b8:	f001 f8d4 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PROGRAM_CPU, GPIO_PIN_SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	4802      	ldr	r0, [pc, #8]	; (80001cc <Port_ProgramCPU+0x2c>)
 80001c4:	f001 f8ce 	bl	8001364 <HAL_GPIO_WritePin>
}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <Port_RunCPU>:

void Port_RunCPU()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, PROGRAM_CPU, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001da:	4808      	ldr	r0, [pc, #32]	; (80001fc <Port_RunCPU+0x2c>)
 80001dc:	f001 f8c2 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ONE_STEP, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <Port_RunCPU+0x2c>)
 80001e8:	f001 f8bc 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RUN_CPU, GPIO_PIN_SET);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f2:	4802      	ldr	r0, [pc, #8]	; (80001fc <Port_RunCPU+0x2c>)
 80001f4:	f001 f8b6 	bl	8001364 <HAL_GPIO_WritePin>
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010c00 	.word	0x40010c00

08000200 <Port_OnStep>:

void Port_OnStep()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, PROGRAM_CPU, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <Port_OnStep+0x2c>)
 800020c:	f001 f8aa 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RUN_CPU, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000216:	4805      	ldr	r0, [pc, #20]	; (800022c <Port_OnStep+0x2c>)
 8000218:	f001 f8a4 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ONE_STEP, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000222:	4802      	ldr	r0, [pc, #8]	; (800022c <Port_OnStep+0x2c>)
 8000224:	f001 f89e 	bl	8001364 <HAL_GPIO_WritePin>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40010c00 	.word	0x40010c00

08000230 <Port_Write>:

void Port_Write(char* buffer, int offset, int bytes)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
	Port_Set();
 800023c:	f000 f86a 	bl	8000314 <Port_Set>
	Port_AsOutput();
 8000240:	f000 f88c 	bl	800035c <Port_AsOutput>
	for (int i = offset; i < (offset + bytes); i++)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	617b      	str	r3, [r7, #20]
 8000248:	e00e      	b.n	8000268 <Port_Write+0x38>
	{
		set_address(i);
 800024a:	6978      	ldr	r0, [r7, #20]
 800024c:	f000 f8bc 	bl	80003c8 <set_address>
		GPIOA->ODR = buffer[i - offset];
 8000250:	697a      	ldr	r2, [r7, #20]
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	461a      	mov	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4413      	add	r3, r2
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <Port_Write+0x50>)
 8000260:	60da      	str	r2, [r3, #12]
	for (int i = offset; i < (offset + bytes); i++)
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	3301      	adds	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4413      	add	r3, r2
 800026e:	697a      	ldr	r2, [r7, #20]
 8000270:	429a      	cmp	r2, r3
 8000272:	dbea      	blt.n	800024a <Port_Write+0x1a>
	}
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40010800 	.word	0x40010800

08000284 <Port_init>:

void Port_init()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, READY_SIGNAL, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028e:	480b      	ldr	r0, [pc, #44]	; (80002bc <Port_init+0x38>)
 8000290:	f001 f868 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fdaf 	bl	8000df8 <HAL_Delay>
	Port_Reset();
 800029a:	f000 f84d 	bl	8000338 <Port_Reset>
	HAL_Delay(1);
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 fdaa 	bl	8000df8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, READY_SIGNAL, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002aa:	4804      	ldr	r0, [pc, #16]	; (80002bc <Port_init+0x38>)
 80002ac:	f001 f85a 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 fda1 	bl	8000df8 <HAL_Delay>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40011000 	.word	0x40011000

080002c0 <Port_Read>:

void Port_Read(char* buffer, int offset, int bytes)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
	Port_Set();
 80002cc:	f000 f822 	bl	8000314 <Port_Set>
	Port_AsInput();
 80002d0:	f000 f860 	bl	8000394 <Port_AsInput>
	for (int i = offset; i < (offset + bytes); i++)
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00f      	b.n	80002fa <Port_Read+0x3a>
	{
		set_address(i);
 80002da:	6978      	ldr	r0, [r7, #20]
 80002dc:	f000 f874 	bl	80003c8 <set_address>
		buffer[i - offset] = (0xff) & (GPIOA->IDR);
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <Port_Read+0x50>)
 80002e2:	6899      	ldr	r1, [r3, #8]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	4413      	add	r3, r2
 80002f0:	b2ca      	uxtb	r2, r1
 80002f2:	701a      	strb	r2, [r3, #0]
	for (int i = offset; i < (offset + bytes); i++)
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	3301      	adds	r3, #1
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	68ba      	ldr	r2, [r7, #8]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	429a      	cmp	r2, r3
 8000304:	dbe9      	blt.n	80002da <Port_Read+0x1a>
	}
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	3718      	adds	r7, #24
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40010800 	.word	0x40010800

08000314 <Port_Set>:

void Port_Set()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, OUTPUT_ENABLE, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <Port_Set+0x20>)
 8000320:	f001 f820 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PORT_RESET, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032a:	4802      	ldr	r0, [pc, #8]	; (8000334 <Port_Set+0x20>)
 800032c:	f001 f81a 	bl	8001364 <HAL_GPIO_WritePin>
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40010c00 	.word	0x40010c00

08000338 <Port_Reset>:

void Port_Reset()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, OUTPUT_ENABLE, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <Port_Reset+0x20>)
 8000344:	f001 f80e 	bl	8001364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SHIFT_CLOCK | LATCH_CLOCK | PORT_RESET
 8000348:	2200      	movs	r2, #0
 800034a:	f240 21e1 	movw	r1, #737	; 0x2e1
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <Port_Reset+0x20>)
 8000350:	f001 f808 	bl	8001364 <HAL_GPIO_WritePin>
			| OUTPUT_DATA_H | OUTPUT_DATA_L, GPIO_PIN_RESET);
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40010c00 	.word	0x40010c00

0800035c <Port_AsOutput>:

void Port_AsOutput()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	463b      	mov	r3, r7
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800036e:	23ff      	movs	r3, #255	; 0xff
 8000370:	603b      	str	r3, [r7, #0]
								|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037a:	2303      	movs	r3, #3
 800037c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037e:	463b      	mov	r3, r7
 8000380:	4619      	mov	r1, r3
 8000382:	4803      	ldr	r0, [pc, #12]	; (8000390 <Port_AsOutput+0x34>)
 8000384:	f000 fe6a 	bl	800105c <HAL_GPIO_Init>
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40010800 	.word	0x40010800

08000394 <Port_AsInput>:

void Port_AsInput()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	463b      	mov	r3, r7
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003a6:	23ff      	movs	r3, #255	; 0xff
 80003a8:	603b      	str	r3, [r7, #0]
	                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003aa:	2300      	movs	r3, #0
 80003ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	463b      	mov	r3, r7
 80003b4:	4619      	mov	r1, r3
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <Port_AsInput+0x30>)
 80003b8:	f000 fe50 	bl	800105c <HAL_GPIO_Init>
}
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40010800 	.word	0x40010800

080003c8 <set_address>:

static void set_address(int value)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	char addressH = ((0xff00 & value) >> 8);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	121b      	asrs	r3, r3, #8
 80003d4:	75fb      	strb	r3, [r7, #23]
	char addressL = (0xff & value);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	75bb      	strb	r3, [r7, #22]

	for (int i = 0; i < 8; i++)
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
 80003de:	e036      	b.n	800044e <set_address+0x86>
	{
		if ((128 & addressH) == 128)
 80003e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	da05      	bge.n	80003f4 <set_address+0x2c>
		{
			HAL_GPIO_WritePin(GPIOB, OUTPUT_DATA_H, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2120      	movs	r1, #32
 80003ec:	4824      	ldr	r0, [pc, #144]	; (8000480 <set_address+0xb8>)
 80003ee:	f000 ffb9 	bl	8001364 <HAL_GPIO_WritePin>
 80003f2:	e004      	b.n	80003fe <set_address+0x36>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, OUTPUT_DATA_H, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2120      	movs	r1, #32
 80003f8:	4821      	ldr	r0, [pc, #132]	; (8000480 <set_address+0xb8>)
 80003fa:	f000 ffb3 	bl	8001364 <HAL_GPIO_WritePin>
		}

		if ((128 & addressL) == 128)
 80003fe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000402:	2b00      	cmp	r3, #0
 8000404:	da05      	bge.n	8000412 <set_address+0x4a>
		{
			HAL_GPIO_WritePin(GPIOB, OUTPUT_DATA_L, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	481d      	ldr	r0, [pc, #116]	; (8000480 <set_address+0xb8>)
 800040c:	f000 ffaa 	bl	8001364 <HAL_GPIO_WritePin>
 8000410:	e004      	b.n	800041c <set_address+0x54>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, OUTPUT_DATA_L, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2140      	movs	r1, #64	; 0x40
 8000416:	481a      	ldr	r0, [pc, #104]	; (8000480 <set_address+0xb8>)
 8000418:	f000 ffa4 	bl	8001364 <HAL_GPIO_WritePin>
		}

		int j = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]

		while (j < 2)
 8000420:	e009      	b.n	8000436 <set_address+0x6e>
		{
			HAL_GPIO_TogglePin(GPIOB, SHIFT_CLOCK);
 8000422:	2101      	movs	r1, #1
 8000424:	4816      	ldr	r0, [pc, #88]	; (8000480 <set_address+0xb8>)
 8000426:	f000 ffb5 	bl	8001394 <HAL_GPIO_TogglePin>
			delay_us(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f000 fa8a 	bl	8000944 <delay_us>
			j++;
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3301      	adds	r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
		while (j < 2)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2b01      	cmp	r3, #1
 800043a:	ddf2      	ble.n	8000422 <set_address+0x5a>
		}

		addressH <<= 1;
 800043c:	7dfb      	ldrb	r3, [r7, #23]
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	75fb      	strb	r3, [r7, #23]
		addressL <<= 1;
 8000442:	7dbb      	ldrb	r3, [r7, #22]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	3301      	adds	r3, #1
 800044c:	613b      	str	r3, [r7, #16]
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	2b07      	cmp	r3, #7
 8000452:	ddc5      	ble.n	80003e0 <set_address+0x18>
	}

	int k = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]

	while (k < 2)
 8000458:	e009      	b.n	800046e <set_address+0xa6>
	{
		HAL_GPIO_TogglePin(GPIOB, LATCH_CLOCK);
 800045a:	2180      	movs	r1, #128	; 0x80
 800045c:	4808      	ldr	r0, [pc, #32]	; (8000480 <set_address+0xb8>)
 800045e:	f000 ff99 	bl	8001394 <HAL_GPIO_TogglePin>
		delay_us(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f000 fa6e 	bl	8000944 <delay_us>
		k++;
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	3301      	adds	r3, #1
 800046c:	60bb      	str	r3, [r7, #8]
	while (k < 2)
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	2b01      	cmp	r3, #1
 8000472:	ddf2      	ble.n	800045a <set_address+0x92>
	}
}
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40010c00 	.word	0x40010c00

08000484 <Z80_Reset>:

ActionResult_t results[6];


ActionResult_t* Z80_Reset()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	results[3].bytes = 0;
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <Z80_Reset+0x18>)
 800048a:	2200      	movs	r2, #0
 800048c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Port_ResetCPU();
 8000490:	f7ff fe64 	bl	800015c <Port_ResetCPU>
	return &results[0];
 8000494:	4b01      	ldr	r3, [pc, #4]	; (800049c <Z80_Reset+0x18>)
}
 8000496:	4618      	mov	r0, r3
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200000d0 	.word	0x200000d0

080004a0 <Z80_OneStep>:

ActionResult_t* Z80_OneStep()
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	results[3].bytes = 0;
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <Z80_OneStep+0x1c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Port_Reset();
 80004ac:	f7ff ff44 	bl	8000338 <Port_Reset>
	Port_OnStep();
 80004b0:	f7ff fea6 	bl	8000200 <Port_OnStep>
	return &results[1];
 80004b4:	4b02      	ldr	r3, [pc, #8]	; (80004c0 <Z80_OneStep+0x20>)
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000d0 	.word	0x200000d0
 80004c0:	20000104 	.word	0x20000104

080004c4 <Z80_ProgramMode>:

ActionResult_t* Z80_ProgramMode()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	results[3].bytes = 0;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <Z80_ProgramMode+0x18>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Port_ProgramCPU();
 80004d0:	f7ff fe66 	bl	80001a0 <Port_ProgramCPU>
	return &results[2];
 80004d4:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <Z80_ProgramMode+0x1c>)
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000d0 	.word	0x200000d0
 80004e0:	20000138 	.word	0x20000138

080004e4 <Z80_Run>:

ActionResult_t* Z80_Run()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	results[3].bytes = 0;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <Z80_Run+0x1c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Port_Reset();
 80004f0:	f7ff ff22 	bl	8000338 <Port_Reset>
	Port_RunCPU();
 80004f4:	f7ff fe6c 	bl	80001d0 <Port_RunCPU>
	return &results[5];
 80004f8:	4b02      	ldr	r3, [pc, #8]	; (8000504 <Z80_Run+0x20>)
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200000d0 	.word	0x200000d0
 8000504:	200001d4 	.word	0x200001d4

08000508 <Z80_WriteMemory>:

ActionResult_t* Z80_WriteMemory(char* buffer, int offset, int bytes)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
	if (bytes <= 48)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b30      	cmp	r3, #48	; 0x30
 8000518:	dc12      	bgt.n	8000540 <Z80_WriteMemory+0x38>
	{
		const char* response = "TEST WRITE";
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <Z80_WriteMemory+0x44>)
 800051c:	617b      	str	r3, [r7, #20]
		results[3].bytes = strlen(response);
 800051e:	6978      	ldr	r0, [r7, #20]
 8000520:	f7ff fe14 	bl	800014c <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <Z80_WriteMemory+0x48>)
 800052a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		Port_Write(buffer, offset, bytes);
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f7ff fe7c 	bl	8000230 <Port_Write>
		strcpy(results[3].buffer, response);
 8000538:	6979      	ldr	r1, [r7, #20]
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <Z80_WriteMemory+0x4c>)
 800053c:	f007 fd86 	bl	800804c <strcpy>
	}
	return &results[3];
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <Z80_WriteMemory+0x4c>)
};
 8000542:	4618      	mov	r0, r3
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	08008074 	.word	0x08008074
 8000550:	200000d0 	.word	0x200000d0
 8000554:	2000016c 	.word	0x2000016c

08000558 <Z80_ReadMemory>:

ActionResult_t* Z80_ReadMemory(int offset, int bytes)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08e      	sub	sp, #56	; 0x38
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	if (bytes <= 48)
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b30      	cmp	r3, #48	; 0x30
 8000566:	dc11      	bgt.n	800058c <Z80_ReadMemory+0x34>
	{
		char buffer[48];
		Port_Read(buffer, offset, bytes);
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fea5 	bl	80002c0 <Port_Read>
		results[4].bytes = bytes;
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <Z80_ReadMemory+0x40>)
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		memcpy(results[4].buffer, buffer, bytes);
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <Z80_ReadMemory+0x44>)
 8000588:	f007 fd4a 	bl	8008020 <memcpy>
	}
	return &results[4];
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <Z80_ReadMemory+0x44>)
}
 800058e:	4618      	mov	r0, r3
 8000590:	3738      	adds	r7, #56	; 0x38
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000d0 	.word	0x200000d0
 800059c:	200001a0 	.word	0x200001a0

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fbc6 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f809 	bl	80005be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f8b8 	bl	8000720 <MX_GPIO_Init>
//  MX_USB_DEVICE_Init();
  MX_TIM1_Init();
 80005b0:	f000 f862 	bl	8000678 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  CUSTOM_MX_USB_DEVICE_Init();
 80005b4:	f000 fb98 	bl	8000ce8 <CUSTOM_MX_USB_DEVICE_Init>
  Port_init();
 80005b8:	f7ff fe64 	bl	8000284 <Port_init>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x1c>

080005be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b094      	sub	sp, #80	; 0x50
 80005c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c8:	2228      	movs	r2, #40	; 0x28
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f007 fd35 	bl	800803c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800060a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fb83 	bl	8002d20 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000620:	f000 f910 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000634:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2102      	movs	r1, #2
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fdef 	bl	8003224 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800064c:	f000 f8fa 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000650:	2310      	movs	r3, #16
 8000652:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f002 ff6e 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000666:	f000 f8ed 	bl	8000844 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800066a:	f002 fec5 	bl	80033f8 <HAL_RCC_EnableCSS>
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_TIM1_Init+0xa0>)
 8000696:	4a21      	ldr	r2, [pc, #132]	; (800071c <MX_TIM1_Init+0xa4>)
 8000698:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_TIM1_Init+0xa0>)
 800069c:	2247      	movs	r2, #71	; 0x47
 800069e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80006ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c0:	4815      	ldr	r0, [pc, #84]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006c2:	f002 fff1 	bl	80036a8 <HAL_TIM_Base_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006cc:	f000 f8ba 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4619      	mov	r1, r3
 80006dc:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006de:	f003 f87d 	bl	80037dc <HAL_TIM_ConfigClockSource>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006e8:	f000 f8ac 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006fa:	f003 fa2b 	bl	8003b54 <HAL_TIMEx_MasterConfigSynchronization>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000704:	f000 f89e 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <MX_TIM1_Init+0xa0>)
 800070a:	f003 f81d 	bl	8003748 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000208 	.word	0x20000208
 800071c:	40012c00 	.word	0x40012c00

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <MX_GPIO_Init+0x114>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a3e      	ldr	r2, [pc, #248]	; (8000834 <MX_GPIO_Init+0x114>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <MX_GPIO_Init+0x114>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0310 	and.w	r3, r3, #16
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074c:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_GPIO_Init+0x114>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a38      	ldr	r2, [pc, #224]	; (8000834 <MX_GPIO_Init+0x114>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b36      	ldr	r3, [pc, #216]	; (8000834 <MX_GPIO_Init+0x114>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0320 	and.w	r3, r3, #32
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b33      	ldr	r3, [pc, #204]	; (8000834 <MX_GPIO_Init+0x114>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a32      	ldr	r2, [pc, #200]	; (8000834 <MX_GPIO_Init+0x114>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b30      	ldr	r3, [pc, #192]	; (8000834 <MX_GPIO_Init+0x114>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_GPIO_Init+0x114>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <MX_GPIO_Init+0x114>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_GPIO_Init+0x114>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079a:	4827      	ldr	r0, [pc, #156]	; (8000838 <MX_GPIO_Init+0x118>)
 800079c:	f000 fde2 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80007a0:	2200      	movs	r2, #0
 80007a2:	f24e 31e1 	movw	r1, #58337	; 0xe3e1
 80007a6:	4825      	ldr	r0, [pc, #148]	; (800083c <MX_GPIO_Init+0x11c>)
 80007a8:	f000 fddc 	bl	8001364 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b2:	4822      	ldr	r0, [pc, #136]	; (800083c <MX_GPIO_Init+0x11c>)
 80007b4:	f000 fdd6 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <MX_GPIO_Init+0x118>)
 80007d2:	f000 fc43 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007d6:	23ff      	movs	r3, #255	; 0xff
 80007d8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	4815      	ldr	r0, [pc, #84]	; (8000840 <MX_GPIO_Init+0x120>)
 80007ea:	f000 fc37 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80007ee:	f240 33e1 	movw	r3, #993	; 0x3e1
 80007f2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_GPIO_Init+0x11c>)
 8000808:	f000 fc28 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800080c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2302      	movs	r3, #2
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_GPIO_Init+0x11c>)
 8000826:	f000 fc19 	bl	800105c <HAL_GPIO_Init>

}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000
 8000838:	40011000 	.word	0x40011000
 800083c:	40010c00 	.word	0x40010c00
 8000840:	40010800 	.word	0x40010800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_MspInit+0x40>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <HAL_MspInit+0x40>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_MspInit+0x40>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_MspInit+0x40>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_MspInit+0x40>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_MspInit+0x40>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <HAL_TIM_Base_MspInit+0x34>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d10b      	bne.n	80008be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_TIM_Base_MspInit+0x38>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_TIM_Base_MspInit+0x38>)
 80008ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_TIM_Base_MspInit+0x38>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40012c00 	.word	0x40012c00
 80008cc:	40021000 	.word	0x40021000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80008d4:	f002 fdfa 	bl	80034cc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x8>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 fa51 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800092a:	f000 fe7d 	bl	8001628 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200007a4 	.word	0x200007a4

08000938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <delay_us>:
#include "timers.h"

extern TIM_HandleTypeDef htim1;

void delay_us (uint16_t us)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <delay_us+0x2c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000956:	bf00      	nop
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <delay_us+0x2c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	429a      	cmp	r2, r3
 8000962:	d3f9      	bcc.n	8000958 <delay_us+0x14>
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000208 	.word	0x20000208

08000974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000976:	490d      	ldr	r1, [pc, #52]	; (80009ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800098c:	4c0a      	ldr	r4, [pc, #40]	; (80009b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800099a:	f7ff ffcd 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099e:	f007 fb1b 	bl	8007fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a2:	f7ff fdfd 	bl	80005a0 <main>
  bx lr
 80009a6:	4770      	bx	lr
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80009b0:	0800814c 	.word	0x0800814c
  ldr r2, =_sbss
 80009b4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80009b8:	20000aac 	.word	0x20000aac

080009bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>
	...

080009c0 <USBD_CUSTOM_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_EPIN_ADDR, USBD_EP_TYPE_BULK, CUSTOM_EPIN_SIZE);
 80009cc:	2340      	movs	r3, #64	; 0x40
 80009ce:	2202      	movs	r2, #2
 80009d0:	2181      	movs	r1, #129	; 0x81
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f007 f99f 	bl	8007d16 <USBD_LL_OpenEP>
  pdev->ep_in[CUSTOM_EPIN_ADDR & 0xFU].is_used = 1U;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_EPOUT_ADDR, USBD_EP_TYPE_BULK, CUSTOM_EPOUT_SIZE);
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	2202      	movs	r2, #2
 80009e2:	2101      	movs	r1, #1
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f007 f996 	bl	8007d16 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_EPOUT_ADDR & 0xFU].is_used = 1U;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2201      	movs	r2, #1
 80009ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80009f8:	60fb      	str	r3, [r7, #12]
  PCD_EPTypeDef *ep = &(hpcd->OUT_ep[CUSTOM_EPOUT_ADDR & 0xFU]);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000a00:	60bb      	str	r3, [r7, #8]
  ep->xfer_buff = buffer_out;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <USBD_CUSTOM_Init+0x78>)
 8000a06:	615a      	str	r2, [r3, #20]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HandleTypeDef));
 8000a08:	2010      	movs	r0, #16
 8000a0a:	f007 fa99 	bl	8007f40 <USBD_static_malloc>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <USBD_CUSTOM_Init+0x64>
  {
    return USBD_FAIL;
 8000a20:	2302      	movs	r3, #2
 8000a22:	e005      	b.n	8000a30 <USBD_CUSTOM_Init+0x70>
  }

  ((USBD_CUSTOM_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_IDLE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000250 	.word	0x20000250

08000a3c <USBD_CUSTOM_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, CUSTOM_EPIN_ADDR);
 8000a48:	2181      	movs	r1, #129	; 0x81
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f007 f989 	bl	8007d62 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_EPIN_ADDR & 0xFU].is_used = 0U;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d009      	beq.n	8000a74 <USBD_CUSTOM_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000a66:	4618      	mov	r0, r3
 8000a68:	f007 fa76 	bl	8007f58 <USBD_static_free>
    pdev->pClassData = NULL;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <USBD_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_GetFSCfgDesc(uint16_t *length)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CfgFSDesc);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	801a      	strh	r2, [r3, #0]
  return USBD_CfgFSDesc;
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <USBD_GetFSCfgDesc+0x1c>)
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	2000003c 	.word	0x2000003c

08000aa0 <USBD_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_IDLE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
	...

08000ac4 <USBD_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DataOut(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b0a5      	sub	sp, #148	; 0x94
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_IDLE;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	731a      	strb	r2, [r3, #12]
  HAL_PCD_EP_Receive(pdev->pData, CUSTOM_EPOUT_ADDR & 0xFU, &buffer_out[0], 64);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	4a77      	ldr	r2, [pc, #476]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	f000 ffc5 	bl	8001a74 <HAL_PCD_EP_Receive>
  ActionResult_t* result = NULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  switch(buffer_out[0])
 8000af0:	4b73      	ldr	r3, [pc, #460]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b92      	cmp	r3, #146	; 0x92
 8000af6:	d017      	beq.n	8000b28 <USBD_DataOut+0x64>
 8000af8:	2b92      	cmp	r3, #146	; 0x92
 8000afa:	f300 80c2 	bgt.w	8000c82 <USBD_DataOut+0x1be>
 8000afe:	2b78      	cmp	r3, #120	; 0x78
 8000b00:	f000 8084 	beq.w	8000c0c <USBD_DataOut+0x148>
 8000b04:	2b78      	cmp	r3, #120	; 0x78
 8000b06:	f300 80bc 	bgt.w	8000c82 <USBD_DataOut+0x1be>
 8000b0a:	2b73      	cmp	r3, #115	; 0x73
 8000b0c:	d020      	beq.n	8000b50 <USBD_DataOut+0x8c>
 8000b0e:	2b73      	cmp	r3, #115	; 0x73
 8000b10:	f300 80b7 	bgt.w	8000c82 <USBD_DataOut+0x1be>
 8000b14:	2b65      	cmp	r3, #101	; 0x65
 8000b16:	d03f      	beq.n	8000b98 <USBD_DataOut+0xd4>
 8000b18:	2b65      	cmp	r3, #101	; 0x65
 8000b1a:	f300 80b2 	bgt.w	8000c82 <USBD_DataOut+0x1be>
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	d04d      	beq.n	8000bbe <USBD_DataOut+0xfa>
 8000b22:	2b33      	cmp	r3, #51	; 0x33
 8000b24:	d026      	beq.n	8000b74 <USBD_DataOut+0xb0>
 8000b26:	e0ac      	b.n	8000c82 <USBD_DataOut+0x1be>
  {
	  case CRESET:
	  {
		  const char resetMsg[] = "RESET";
 8000b28:	4a66      	ldr	r2, [pc, #408]	; (8000cc4 <USBD_DataOut+0x200>)
 8000b2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b32:	6018      	str	r0, [r3, #0]
 8000b34:	3304      	adds	r3, #4
 8000b36:	8019      	strh	r1, [r3, #0]
		  memcpy(buffer_in, resetMsg, 12);
 8000b38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4861      	ldr	r0, [pc, #388]	; (8000cc8 <USBD_DataOut+0x204>)
 8000b42:	f007 fa6d 	bl	8008020 <memcpy>
		  result = Z80_Reset();
 8000b46:	f7ff fc9d 	bl	8000484 <Z80_Reset>
 8000b4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	  }
	  break;
 8000b4e:	e098      	b.n	8000c82 <USBD_DataOut+0x1be>
	  case ONE_STEP:
	  {
		  const char resetMsg[] = "ONE_STEP";
 8000b50:	4a5e      	ldr	r2, [pc, #376]	; (8000ccc <USBD_DataOut+0x208>)
 8000b52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b58:	c303      	stmia	r3!, {r0, r1}
 8000b5a:	701a      	strb	r2, [r3, #0]
		  memcpy(buffer_in, resetMsg, 12);
 8000b5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b60:	220c      	movs	r2, #12
 8000b62:	4619      	mov	r1, r3
 8000b64:	4858      	ldr	r0, [pc, #352]	; (8000cc8 <USBD_DataOut+0x204>)
 8000b66:	f007 fa5b 	bl	8008020 <memcpy>
		  result = Z80_OneStep();
 8000b6a:	f7ff fc99 	bl	80004a0 <Z80_OneStep>
 8000b6e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	  }
	  break;
 8000b72:	e086      	b.n	8000c82 <USBD_DataOut+0x1be>
	  case PROGRAM_MODE:
	  {
		  const char resetMsg[] = "PROGRAM_MODE";
 8000b74:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <USBD_DataOut+0x20c>)
 8000b76:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b7c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b7e:	7023      	strb	r3, [r4, #0]
		  memcpy(buffer_in, resetMsg, 12);
 8000b80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b84:	220c      	movs	r2, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	484f      	ldr	r0, [pc, #316]	; (8000cc8 <USBD_DataOut+0x204>)
 8000b8a:	f007 fa49 	bl	8008020 <memcpy>
		  result = Z80_ProgramMode();
 8000b8e:	f7ff fc99 	bl	80004c4 <Z80_ProgramMode>
 8000b92:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	  }
	  break;
 8000b96:	e074      	b.n	8000c82 <USBD_DataOut+0x1be>
	  case RUN_CPU:
	  {
		  const char resetMsg[] = "RUN_CPU";
 8000b98:	4a4e      	ldr	r2, [pc, #312]	; (8000cd4 <USBD_DataOut+0x210>)
 8000b9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba2:	e883 0003 	stmia.w	r3, {r0, r1}
		  memcpy(buffer_in, resetMsg, 12);
 8000ba6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000baa:	220c      	movs	r2, #12
 8000bac:	4619      	mov	r1, r3
 8000bae:	4846      	ldr	r0, [pc, #280]	; (8000cc8 <USBD_DataOut+0x204>)
 8000bb0:	f007 fa36 	bl	8008020 <memcpy>
		  result = Z80_Run();
 8000bb4:	f7ff fc96 	bl	80004e4 <Z80_Run>
 8000bb8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	  }
	  break;
 8000bbc:	e061      	b.n	8000c82 <USBD_DataOut+0x1be>
	  case READ_DATA:
	  {
		  const char resetMsg[] = "READ_DATA";
 8000bbe:	4a46      	ldr	r2, [pc, #280]	; (8000cd8 <USBD_DataOut+0x214>)
 8000bc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bc6:	c303      	stmia	r3!, {r0, r1}
 8000bc8:	801a      	strh	r2, [r3, #0]
		  memcpy(buffer_in, resetMsg, 12);
 8000bca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bce:	220c      	movs	r2, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	483d      	ldr	r0, [pc, #244]	; (8000cc8 <USBD_DataOut+0x204>)
 8000bd4:	f007 fa24 	bl	8008020 <memcpy>
		  int offset = ((int)buffer_out[3] << 8) | (buffer_out[4]);
 8000bd8:	4b39      	ldr	r3, [pc, #228]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	4a38      	ldr	r2, [pc, #224]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000be0:	7912      	ldrb	r2, [r2, #4]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		  int len = ((int)buffer_out[1] << 8) | (buffer_out[2]);
 8000be8:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	4a34      	ldr	r2, [pc, #208]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000bf0:	7892      	ldrb	r2, [r2, #2]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
		  if (len <= 48)
 8000bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bf8:	2b30      	cmp	r3, #48	; 0x30
 8000bfa:	dc3f      	bgt.n	8000c7c <USBD_DataOut+0x1b8>
		  {
			  result = Z80_ReadMemory(offset, len);
 8000bfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000bfe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000c02:	f7ff fca9 	bl	8000558 <Z80_ReadMemory>
 8000c06:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  }
	  }
	  break;
 8000c0a:	e037      	b.n	8000c7c <USBD_DataOut+0x1b8>
	  case WRITE_DATA:
	  {
		  const char resetMsg[] = "WRITE_DATA";
 8000c0c:	4a33      	ldr	r2, [pc, #204]	; (8000cdc <USBD_DataOut+0x218>)
 8000c0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c14:	c303      	stmia	r3!, {r0, r1}
 8000c16:	801a      	strh	r2, [r3, #0]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	0c12      	lsrs	r2, r2, #16
 8000c1c:	701a      	strb	r2, [r3, #0]
		  memcpy(buffer_in, resetMsg, 12);
 8000c1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c22:	220c      	movs	r2, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4828      	ldr	r0, [pc, #160]	; (8000cc8 <USBD_DataOut+0x204>)
 8000c28:	f007 f9fa 	bl	8008020 <memcpy>
		  char writeBuffer[48];
		  int offset = ((int)buffer_out[3] << 8) | (buffer_out[4]);
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000c2e:	78db      	ldrb	r3, [r3, #3]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	4a23      	ldr	r2, [pc, #140]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000c34:	7912      	ldrb	r2, [r2, #4]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  int len = ((int)buffer_out[1] << 8) | (buffer_out[2]);
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000c3e:	785b      	ldrb	r3, [r3, #1]
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <USBD_DataOut+0x1fc>)
 8000c44:	7892      	ldrb	r2, [r2, #2]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  if (len <= 48)
 8000c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c50:	2b30      	cmp	r3, #48	; 0x30
 8000c52:	dc15      	bgt.n	8000c80 <USBD_DataOut+0x1bc>
		  {
			  memcpy(writeBuffer, &buffer_out[16], len);
 8000c54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4920      	ldr	r1, [pc, #128]	; (8000ce0 <USBD_DataOut+0x21c>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f007 f9de 	bl	8008020 <memcpy>
			  result = Z80_WriteMemory(writeBuffer, offset, len);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000c6c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc49 	bl	8000508 <Z80_WriteMemory>
 8000c76:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  }
	  }
	  break;
 8000c7a:	e001      	b.n	8000c80 <USBD_DataOut+0x1bc>
	  break;
 8000c7c:	bf00      	nop
 8000c7e:	e000      	b.n	8000c82 <USBD_DataOut+0x1be>
	  break;
 8000c80:	bf00      	nop
  }

  if (result != NULL)
 8000c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00c      	beq.n	8000ca4 <USBD_DataOut+0x1e0>
  {
	  memcpy(&buffer_in[15], &(result->bytes), 1);
 8000c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c8e:	3330      	adds	r3, #48	; 0x30
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <USBD_DataOut+0x204>)
 8000c94:	73da      	strb	r2, [r3, #15]
	  memcpy(&buffer_in[16], result->buffer, 48);
 8000c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c9a:	2230      	movs	r2, #48	; 0x30
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <USBD_DataOut+0x220>)
 8000ca0:	f007 f9be 	bl	8008020 <memcpy>
  }

  HAL_PCD_EP_Transmit(pdev->pData, CUSTOM_EPIN_ADDR & 0xFFU, &buffer_in[0], 64);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000caa:	2340      	movs	r3, #64	; 0x40
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <USBD_DataOut+0x204>)
 8000cae:	2181      	movs	r1, #129	; 0x81
 8000cb0:	f000 ff1d 	bl	8001aee <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3794      	adds	r7, #148	; 0x94
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000250 	.word	0x20000250
 8000cc4:	08008080 	.word	0x08008080
 8000cc8:	20000294 	.word	0x20000294
 8000ccc:	08008088 	.word	0x08008088
 8000cd0:	08008094 	.word	0x08008094
 8000cd4:	080080a4 	.word	0x080080a4
 8000cd8:	080080ac 	.word	0x080080ac
 8000cdc:	080080b8 	.word	0x080080b8
 8000ce0:	20000260 	.word	0x20000260
 8000ce4:	200002a4 	.word	0x200002a4

08000ce8 <CUSTOM_MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void CUSTOM_MX_USB_DEVICE_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hCustomUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000cec:	2200      	movs	r2, #0
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <CUSTOM_MX_USB_DEVICE_Init+0x40>)
 8000cf0:	480e      	ldr	r0, [pc, #56]	; (8000d2c <CUSTOM_MX_USB_DEVICE_Init+0x44>)
 8000cf2:	f005 fd59 	bl	80067a8 <USBD_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <CUSTOM_MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000cfc:	f7ff fda2 	bl	8000844 <Error_Handler>
  }
  if (USBD_RegisterClass(&hCustomUsbDeviceFS, &USBD_CUSTOM) != USBD_OK)
 8000d00:	490b      	ldr	r1, [pc, #44]	; (8000d30 <CUSTOM_MX_USB_DEVICE_Init+0x48>)
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <CUSTOM_MX_USB_DEVICE_Init+0x44>)
 8000d04:	f005 fd7b 	bl	80067fe <USBD_RegisterClass>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <CUSTOM_MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000d0e:	f7ff fd99 	bl	8000844 <Error_Handler>
  }
//  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
//  {
//    Error_Handler();
//  }
  if (USBD_Start(&hCustomUsbDeviceFS) != USBD_OK)
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <CUSTOM_MX_USB_DEVICE_Init+0x44>)
 8000d14:	f005 fd8c 	bl	8006830 <USBD_Start>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <CUSTOM_MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8000d1e:	f7ff fd91 	bl	8000844 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000064 	.word	0x20000064
 8000d2c:	200002d8 	.word	0x200002d8
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x28>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x28>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f947 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fd7e 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f95f 	bl	8001042 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f927 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000060 	.word	0x20000060
 8000dbc:	2000005c 	.word	0x2000005c

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20000060 	.word	0x20000060
 8000de0:	2000059c 	.word	0x2000059c

08000de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	2000059c 	.word	0x2000059c

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff fff0 	bl	8000de4 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffe0 	bl	8000de4 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000060 	.word	0x20000060

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4906      	ldr	r1, [pc, #24]	; (8000ed8 <__NVIC_EnableIRQ+0x34>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff90 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff2d 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff42 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff90 	bl	8000f30 <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5f 	bl	8000edc <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff35 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b08b      	sub	sp, #44	; 0x2c
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106e:	e169      	b.n	8001344 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001070:	2201      	movs	r2, #1
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8158 	bne.w	800133e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a9a      	ldr	r2, [pc, #616]	; (80012fc <HAL_GPIO_Init+0x2a0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d05e      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 8001098:	4a98      	ldr	r2, [pc, #608]	; (80012fc <HAL_GPIO_Init+0x2a0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d875      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 800109e:	4a98      	ldr	r2, [pc, #608]	; (8001300 <HAL_GPIO_Init+0x2a4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d058      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010a4:	4a96      	ldr	r2, [pc, #600]	; (8001300 <HAL_GPIO_Init+0x2a4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d86f      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010aa:	4a96      	ldr	r2, [pc, #600]	; (8001304 <HAL_GPIO_Init+0x2a8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d052      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010b0:	4a94      	ldr	r2, [pc, #592]	; (8001304 <HAL_GPIO_Init+0x2a8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d869      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010b6:	4a94      	ldr	r2, [pc, #592]	; (8001308 <HAL_GPIO_Init+0x2ac>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d04c      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010bc:	4a92      	ldr	r2, [pc, #584]	; (8001308 <HAL_GPIO_Init+0x2ac>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d863      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010c2:	4a92      	ldr	r2, [pc, #584]	; (800130c <HAL_GPIO_Init+0x2b0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d046      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010c8:	4a90      	ldr	r2, [pc, #576]	; (800130c <HAL_GPIO_Init+0x2b0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d85d      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d82a      	bhi.n	8001128 <HAL_GPIO_Init+0xcc>
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d859      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010d6:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <HAL_GPIO_Init+0x80>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	08001157 	.word	0x08001157
 80010e0:	08001131 	.word	0x08001131
 80010e4:	08001143 	.word	0x08001143
 80010e8:	08001185 	.word	0x08001185
 80010ec:	0800118b 	.word	0x0800118b
 80010f0:	0800118b 	.word	0x0800118b
 80010f4:	0800118b 	.word	0x0800118b
 80010f8:	0800118b 	.word	0x0800118b
 80010fc:	0800118b 	.word	0x0800118b
 8001100:	0800118b 	.word	0x0800118b
 8001104:	0800118b 	.word	0x0800118b
 8001108:	0800118b 	.word	0x0800118b
 800110c:	0800118b 	.word	0x0800118b
 8001110:	0800118b 	.word	0x0800118b
 8001114:	0800118b 	.word	0x0800118b
 8001118:	0800118b 	.word	0x0800118b
 800111c:	0800118b 	.word	0x0800118b
 8001120:	08001139 	.word	0x08001139
 8001124:	0800114d 	.word	0x0800114d
 8001128:	4a79      	ldr	r2, [pc, #484]	; (8001310 <HAL_GPIO_Init+0x2b4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800112e:	e02c      	b.n	800118a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e029      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	3304      	adds	r3, #4
 800113e:	623b      	str	r3, [r7, #32]
          break;
 8001140:	e024      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	3308      	adds	r3, #8
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e01f      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	330c      	adds	r3, #12
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e01a      	b.n	800118c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d102      	bne.n	8001164 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800115e:	2304      	movs	r3, #4
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e013      	b.n	800118c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d105      	bne.n	8001178 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800116c:	2308      	movs	r3, #8
 800116e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	611a      	str	r2, [r3, #16]
          break;
 8001176:	e009      	b.n	800118c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001178:	2308      	movs	r3, #8
 800117a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	615a      	str	r2, [r3, #20]
          break;
 8001182:	e003      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
          break;
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x130>
          break;
 800118a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2bff      	cmp	r3, #255	; 0xff
 8001190:	d801      	bhi.n	8001196 <HAL_GPIO_Init+0x13a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	e001      	b.n	800119a <HAL_GPIO_Init+0x13e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3304      	adds	r3, #4
 800119a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2bff      	cmp	r3, #255	; 0xff
 80011a0:	d802      	bhi.n	80011a8 <HAL_GPIO_Init+0x14c>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x152>
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	3b08      	subs	r3, #8
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	210f      	movs	r1, #15
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	401a      	ands	r2, r3
 80011c0:	6a39      	ldr	r1, [r7, #32]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80b1 	beq.w	800133e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011dc:	4b4d      	ldr	r3, [pc, #308]	; (8001314 <HAL_GPIO_Init+0x2b8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a4c      	ldr	r2, [pc, #304]	; (8001314 <HAL_GPIO_Init+0x2b8>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_GPIO_Init+0x2b8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011f4:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x2bc>)
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a40      	ldr	r2, [pc, #256]	; (800131c <HAL_GPIO_Init+0x2c0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d013      	beq.n	8001248 <HAL_GPIO_Init+0x1ec>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a3f      	ldr	r2, [pc, #252]	; (8001320 <HAL_GPIO_Init+0x2c4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d00d      	beq.n	8001244 <HAL_GPIO_Init+0x1e8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a3e      	ldr	r2, [pc, #248]	; (8001324 <HAL_GPIO_Init+0x2c8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d007      	beq.n	8001240 <HAL_GPIO_Init+0x1e4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a3d      	ldr	r2, [pc, #244]	; (8001328 <HAL_GPIO_Init+0x2cc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d101      	bne.n	800123c <HAL_GPIO_Init+0x1e0>
 8001238:	2303      	movs	r3, #3
 800123a:	e006      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 800123c:	2304      	movs	r3, #4
 800123e:	e004      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001240:	2302      	movs	r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001248:	2300      	movs	r3, #0
 800124a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800125a:	492f      	ldr	r1, [pc, #188]	; (8001318 <HAL_GPIO_Init+0x2bc>)
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <HAL_GPIO_Init+0x2d0>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	492c      	ldr	r1, [pc, #176]	; (800132c <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <HAL_GPIO_Init+0x2d0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4928      	ldr	r1, [pc, #160]	; (800132c <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_GPIO_Init+0x2d0>)
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4922      	ldr	r1, [pc, #136]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	491e      	ldr	r1, [pc, #120]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	4918      	ldr	r1, [pc, #96]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	4914      	ldr	r1, [pc, #80]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d021      	beq.n	8001330 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	490e      	ldr	r1, [pc, #56]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60cb      	str	r3, [r1, #12]
 80012f8:	e021      	b.n	800133e <HAL_GPIO_Init+0x2e2>
 80012fa:	bf00      	nop
 80012fc:	10320000 	.word	0x10320000
 8001300:	10310000 	.word	0x10310000
 8001304:	10220000 	.word	0x10220000
 8001308:	10210000 	.word	0x10210000
 800130c:	10120000 	.word	0x10120000
 8001310:	10110000 	.word	0x10110000
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40011000 	.word	0x40011000
 8001328:	40011400 	.word	0x40011400
 800132c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_GPIO_Init+0x304>)
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	43db      	mvns	r3, r3
 8001338:	4909      	ldr	r1, [pc, #36]	; (8001360 <HAL_GPIO_Init+0x304>)
 800133a:	4013      	ands	r3, r2
 800133c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	3301      	adds	r3, #1
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	f47f ae8e 	bne.w	8001070 <HAL_GPIO_Init+0x14>
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	372c      	adds	r7, #44	; 0x2c
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	611a      	str	r2, [r3, #16]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4013      	ands	r3, r2
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43d9      	mvns	r1, r3
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	400b      	ands	r3, r1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	611a      	str	r2, [r3, #16]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c8:	b08b      	sub	sp, #44	; 0x2c
 80013ca:	af06      	add	r7, sp, #24
 80013cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0fd      	b.n	80015d4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d106      	bne.n	80013f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f006 fb65 	bl	8007abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fc2c 	bl	8003c5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	687e      	ldr	r6, [r7, #4]
 800140c:	466d      	mov	r5, sp
 800140e:	f106 0410 	add.w	r4, r6, #16
 8001412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	602b      	str	r3, [r5, #0]
 800141a:	1d33      	adds	r3, r6, #4
 800141c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f002 fbf6 	bl	8003c10 <USB_CoreInit>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2202      	movs	r2, #2
 800142e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0ce      	b.n	80015d4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fc27 	bl	8003c90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e04c      	b.n	80014e2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	3301      	adds	r3, #1
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	b298      	uxth	r0, r3
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	3336      	adds	r3, #54	; 0x36
 8001486:	4602      	mov	r2, r0
 8001488:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3303      	adds	r3, #3
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3338      	adds	r3, #56	; 0x38
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	333c      	adds	r3, #60	; 0x3c
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	3340      	adds	r3, #64	; 0x40
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	3301      	adds	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3ad      	bcc.n	8001448 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e044      	b.n	800157c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3b5      	bcc.n	80014f2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	687e      	ldr	r6, [r7, #4]
 800158e:	466d      	mov	r5, sp
 8001590:	f106 0410 	add.w	r4, r6, #16
 8001594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	602b      	str	r3, [r5, #0]
 800159c:	1d33      	adds	r3, r6, #4
 800159e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a0:	6838      	ldr	r0, [r7, #0]
 80015a2:	f002 fb81 	bl	8003ca8 <USB_DevInit>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e00d      	b.n	80015d4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 f833 	bl	8006638 <USB_DevDisconnect>

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_PCD_Start+0x16>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e016      	b.n	8001620 <HAL_PCD_Start+0x44>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fb16 	bl	8003c30 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001604:	2101      	movs	r1, #1
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f006 fcaf 	bl	8007f6a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f005 f807 	bl	8006624 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f005 f809 	bl	800664c <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001644:	d102      	bne.n	800164c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fb48 	bl	8001cdc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f004 fffb 	bl	800664c <USB_ReadInterrupts>
 8001656:	4603      	mov	r3, r0
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001660:	d112      	bne.n	8001688 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001674:	b292      	uxth	r2, r2
 8001676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f006 fa99 	bl	8007bb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001680:	2100      	movs	r1, #0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f923 	bl	80018ce <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f004 ffdd 	bl	800664c <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800169c:	d10b      	bne.n	80016b6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016b0:	b292      	uxth	r2, r2
 80016b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 ffc6 	bl	800664c <USB_ReadInterrupts>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ca:	d10b      	bne.n	80016e4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016de:	b292      	uxth	r2, r2
 80016e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 ffaf 	bl	800664c <USB_ReadInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f8:	d126      	bne.n	8001748 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0204 	bic.w	r2, r2, #4
 800170c:	b292      	uxth	r2, r2
 800170e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0208 	bic.w	r2, r2, #8
 8001724:	b292      	uxth	r2, r2
 8001726:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f006 fa7a 	bl	8007c24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001742:	b292      	uxth	r2, r2
 8001744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f004 ff7d 	bl	800664c <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800175c:	f040 8082 	bne.w	8001864 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001760:	2300      	movs	r3, #0
 8001762:	77fb      	strb	r3, [r7, #31]
 8001764:	e010      	b.n	8001788 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	441a      	add	r2, r3
 8001772:	7ffb      	ldrb	r3, [r7, #31]
 8001774:	8812      	ldrh	r2, [r2, #0]
 8001776:	b292      	uxth	r2, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	3320      	adds	r3, #32
 800177c:	443b      	add	r3, r7
 800177e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001782:	7ffb      	ldrb	r3, [r7, #31]
 8001784:	3301      	adds	r3, #1
 8001786:	77fb      	strb	r3, [r7, #31]
 8001788:	7ffb      	ldrb	r3, [r7, #31]
 800178a:	2b07      	cmp	r3, #7
 800178c:	d9eb      	bls.n	8001766 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	b292      	uxth	r2, r2
 80017a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	b292      	uxth	r2, r2
 80017ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017be:	bf00      	nop
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f6      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e4:	b292      	uxth	r2, r2
 80017e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	77fb      	strb	r3, [r7, #31]
 80017ee:	e00f      	b.n	8001810 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017f0:	7ffb      	ldrb	r3, [r7, #31]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	4611      	mov	r1, r2
 80017f8:	7ffa      	ldrb	r2, [r7, #31]
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	440a      	add	r2, r1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	3320      	adds	r3, #32
 8001802:	443b      	add	r3, r7
 8001804:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001808:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	3301      	adds	r3, #1
 800180e:	77fb      	strb	r3, [r7, #31]
 8001810:	7ffb      	ldrb	r3, [r7, #31]
 8001812:	2b07      	cmp	r3, #7
 8001814:	d9ec      	bls.n	80017f0 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181e:	b29a      	uxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0208 	orr.w	r2, r2, #8
 8001828:	b292      	uxth	r2, r2
 800182a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001836:	b29a      	uxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001840:	b292      	uxth	r2, r2
 8001842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800184e:	b29a      	uxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0204 	orr.w	r2, r2, #4
 8001858:	b292      	uxth	r2, r2
 800185a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f006 f9c6 	bl	8007bf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f004 feef 	bl	800664c <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001878:	d10e      	bne.n	8001898 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001882:	b29a      	uxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800188c:	b292      	uxth	r2, r2
 800188e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f006 f97f 	bl	8007b96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fed5 	bl	800664c <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ac:	d10b      	bne.n	80018c6 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c0:	b292      	uxth	r2, r2
 80018c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_PCD_SetAddress+0x1a>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e013      	b.n	8001910 <HAL_PCD_SetAddress+0x42>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f004 fe7c 	bl	80065fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4603      	mov	r3, r0
 8001928:	70fb      	strb	r3, [r7, #3]
 800192a:	460b      	mov	r3, r1
 800192c:	803b      	strh	r3, [r7, #0]
 800192e:	4613      	mov	r3, r2
 8001930:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	da0e      	bge.n	800195c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	705a      	strb	r2, [r3, #1]
 800195a:	e00e      	b.n	800197a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 0207 	and.w	r2, r3, #7
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	b2da      	uxtb	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001986:	883a      	ldrh	r2, [r7, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	78ba      	ldrb	r2, [r7, #2]
 8001990:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019a4:	78bb      	ldrb	r3, [r7, #2]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d102      	bne.n	80019b0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_PCD_EP_Open+0xa6>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e00e      	b.n	80019dc <HAL_PCD_EP_Open+0xc4>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68f9      	ldr	r1, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 f98b 	bl	8003ce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019da:	7afb      	ldrb	r3, [r7, #11]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	da0e      	bge.n	8001a16 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	705a      	strb	r2, [r3, #1]
 8001a14:	e00e      	b.n	8001a34 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 0207 	and.w	r2, r3, #7
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_PCD_EP_Close+0x6a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e00e      	b.n	8001a6c <HAL_PCD_EP_Close+0x88>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fcad 	bl	80043bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	460b      	mov	r3, r1
 8001a82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a84:	7afb      	ldrb	r3, [r7, #11]
 8001a86:	f003 0207 	and.w	r2, r3, #7
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6979      	ldr	r1, [r7, #20]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fe5f 	bl	8004794 <USB_EPStartXfer>
 8001ad6:	e005      	b.n	8001ae4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6979      	ldr	r1, [r7, #20]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fe58 	bl	8004794 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	460b      	mov	r3, r1
 8001afc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001afe:	7afb      	ldrb	r3, [r7, #11]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2200      	movs	r2, #0
 8001b32:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2201      	movs	r2, #1
 8001b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6979      	ldr	r1, [r7, #20]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 fe1c 	bl	8004794 <USB_EPStartXfer>
 8001b5c:	e005      	b.n	8001b6a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fe15 	bl	8004794 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 0207 	and.w	r2, r3, #7
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d901      	bls.n	8001b92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e04c      	b.n	8001c2c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da0e      	bge.n	8001bb8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	705a      	strb	r2, [r3, #1]
 8001bb6:	e00c      	b.n	8001bd2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_PCD_EP_SetStall+0x7e>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e01c      	b.n	8001c2c <HAL_PCD_EP_SetStall+0xb8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 fbff 	bl	8006404 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f004 fd24 	bl	800666a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 020f 	and.w	r2, r3, #15
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d901      	bls.n	8001c52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e040      	b.n	8001cd4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da0e      	bge.n	8001c78 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	705a      	strb	r2, [r3, #1]
 8001c76:	e00e      	b.n	8001c96 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 0207 	and.w	r2, r3, #7
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_PCD_EP_ClrStall+0x82>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e00e      	b.n	8001cd4 <HAL_PCD_EP_ClrStall+0xa0>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fbed 	bl	80064a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ce4:	e2ec      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001cfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 8161 	bne.w	8001fc8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d152      	bne.n	8001db6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d20:	81fb      	strh	r3, [r7, #14]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	89fb      	ldrh	r3, [r7, #14]
 8001d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3328      	adds	r3, #40	; 0x28
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	441a      	add	r2, r3
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d74:	2100      	movs	r1, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f005 fef3 	bl	8007b62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 829b 	beq.w	80022c0 <PCD_EP_ISR_Handler+0x5e4>
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 8296 	bne.w	80022c0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b292      	uxth	r2, r2
 8001da8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001db4:	e284      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d034      	beq.n	8001e3a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	3306      	adds	r3, #6
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f004 fc7b 	bl	800670a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e20:	4013      	ands	r3, r2
 8001e22:	823b      	strh	r3, [r7, #16]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	8a3a      	ldrh	r2, [r7, #16]
 8001e2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f005 fe68 	bl	8007b08 <HAL_PCD_SetupStageCallback>
 8001e38:	e242      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e3a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f280 823e 	bge.w	80022c0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e50:	4013      	ands	r3, r2
 8001e52:	83bb      	strh	r3, [r7, #28]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	8bba      	ldrh	r2, [r7, #28]
 8001e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	3306      	adds	r3, #6
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <PCD_EP_ISR_Handler+0x1ee>
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d015      	beq.n	8001eca <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	6959      	ldr	r1, [r3, #20]
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f004 fc2b 	bl	800670a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	441a      	add	r2, r3
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f005 fe31 	bl	8007b2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 81f2 	bne.w	80022c0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d112      	bne.n	8001f2a <PCD_EP_ISR_Handler+0x24e>
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	801a      	strh	r2, [r3, #0]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	e02f      	b.n	8001f8a <PCD_EP_ISR_Handler+0x2ae>
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f30:	d813      	bhi.n	8001f5a <PCD_EP_ISR_Handler+0x27e>
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <PCD_EP_ISR_Handler+0x270>
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	3301      	adds	r3, #1
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	029b      	lsls	r3, r3, #10
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	e017      	b.n	8001f8a <PCD_EP_ISR_Handler+0x2ae>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <PCD_EP_ISR_Handler+0x298>
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	3b01      	subs	r3, #1
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	029b      	lsls	r3, r3, #10
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	827b      	strh	r3, [r7, #18]
 8001f9c:	8a7b      	ldrh	r3, [r7, #18]
 8001f9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fa2:	827b      	strh	r3, [r7, #18]
 8001fa4:	8a7b      	ldrh	r3, [r7, #18]
 8001fa6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001faa:	827b      	strh	r3, [r7, #18]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	8a7b      	ldrh	r3, [r7, #18]
 8001fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	8013      	strh	r3, [r2, #0]
 8001fc6:	e17b      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fda:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f280 80ea 	bge.w	80021b8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800200e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002012:	b292      	uxth	r2, r2
 8002014:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002016:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	7b1b      	ldrb	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d122      	bne.n	800207a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	3306      	adds	r3, #6
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800205e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8087 	beq.w	8002174 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	6959      	ldr	r1, [r3, #20]
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	88da      	ldrh	r2, [r3, #6]
 8002072:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002074:	f004 fb49 	bl	800670a <USB_ReadPMA>
 8002078:	e07c      	b.n	8002174 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	78db      	ldrb	r3, [r3, #3]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d108      	bne.n	8002094 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002084:	461a      	mov	r2, r3
 8002086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f927 	bl	80022dc <HAL_PCD_EP_DB_Receive>
 800208e:	4603      	mov	r3, r0
 8002090:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002092:	e06f      	b.n	8002174 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	441a      	add	r2, r3
 80020be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d021      	beq.n	8002132 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	3302      	adds	r3, #2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002116:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002118:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800211a:	2b00      	cmp	r3, #0
 800211c:	d02a      	beq.n	8002174 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	6959      	ldr	r1, [r3, #20]
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	891a      	ldrh	r2, [r3, #8]
 800212a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800212c:	f004 faed 	bl	800670a <USB_ReadPMA>
 8002130:	e020      	b.n	8002174 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	3306      	adds	r3, #6
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800215c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	6959      	ldr	r1, [r3, #20]
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	895a      	ldrh	r2, [r3, #10]
 800216e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002170:	f004 facb 	bl	800670a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800217a:	441a      	add	r2, r3
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002186:	441a      	add	r2, r3
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <PCD_EP_ISR_Handler+0x4c2>
 8002194:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	429a      	cmp	r2, r3
 800219c:	d206      	bcs.n	80021ac <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f005 fcc1 	bl	8007b2c <HAL_PCD_DataOutStageCallback>
 80021aa:	e005      	b.n	80021b8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 faee 	bl	8004794 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d07e      	beq.n	80022c0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80021c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f0:	843b      	strh	r3, [r7, #32]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	441a      	add	r2, r3
 8002200:	8c3b      	ldrh	r3, [r7, #32]
 8002202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800220a:	b29b      	uxth	r3, r3
 800220c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	78db      	ldrb	r3, [r3, #3]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d00c      	beq.n	8002230 <PCD_EP_ISR_Handler+0x554>
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	78db      	ldrb	r3, [r3, #3]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002222:	2b02      	cmp	r3, #2
 8002224:	d146      	bne.n	80022b4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d141      	bne.n	80022b4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002238:	b29b      	uxth	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	3302      	adds	r3, #2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002258:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	8bfb      	ldrh	r3, [r7, #30]
 8002260:	429a      	cmp	r2, r3
 8002262:	d906      	bls.n	8002272 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	8bfb      	ldrh	r3, [r7, #30]
 800226a:	1ad2      	subs	r2, r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	619a      	str	r2, [r3, #24]
 8002270:	e002      	b.n	8002278 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 fc6b 	bl	8007b62 <HAL_PCD_DataInStageCallback>
 800228c:	e018      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	8bfb      	ldrh	r3, [r7, #30]
 8002294:	441a      	add	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	8bfb      	ldrh	r3, [r7, #30]
 80022a0:	441a      	add	r2, r3
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 fa71 	bl	8004794 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022b2:	e005      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022b6:	461a      	mov	r2, r3
 80022b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f91b 	bl	80024f6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f6ff ad0a 	blt.w	8001ce6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3738      	adds	r7, #56	; 0x38
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d07e      	beq.n	80023f2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	3302      	adds	r3, #2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	8b7b      	ldrh	r3, [r7, #26]
 8002324:	429a      	cmp	r2, r3
 8002326:	d306      	bcc.n	8002336 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	8b7b      	ldrh	r3, [r7, #26]
 800232e:	1ad2      	subs	r2, r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	619a      	str	r2, [r3, #24]
 8002334:	e002      	b.n	800233c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d123      	bne.n	800238c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	833b      	strh	r3, [r7, #24]
 8002360:	8b3b      	ldrh	r3, [r7, #24]
 8002362:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002366:	833b      	strh	r3, [r7, #24]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	441a      	add	r2, r3
 8002376:	8b3b      	ldrh	r3, [r7, #24]
 8002378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800237c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002388:	b29b      	uxth	r3, r3
 800238a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01f      	beq.n	80023d6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b0:	82fb      	strh	r3, [r7, #22]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	441a      	add	r2, r3
 80023c0:	8afb      	ldrh	r3, [r7, #22]
 80023c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023d6:	8b7b      	ldrh	r3, [r7, #26]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8087 	beq.w	80024ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6959      	ldr	r1, [r3, #20]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	891a      	ldrh	r2, [r3, #8]
 80023ea:	8b7b      	ldrh	r3, [r7, #26]
 80023ec:	f004 f98d 	bl	800670a <USB_ReadPMA>
 80023f0:	e07c      	b.n	80024ec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	3306      	adds	r3, #6
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	8b7b      	ldrh	r3, [r7, #26]
 8002422:	429a      	cmp	r2, r3
 8002424:	d306      	bcc.n	8002434 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	8b7b      	ldrh	r3, [r7, #26]
 800242c:	1ad2      	subs	r2, r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	619a      	str	r2, [r3, #24]
 8002432:	e002      	b.n	800243a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d123      	bne.n	800248a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245c:	83fb      	strh	r3, [r7, #30]
 800245e:	8bfb      	ldrh	r3, [r7, #30]
 8002460:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002464:	83fb      	strh	r3, [r7, #30]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	441a      	add	r2, r3
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800247a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800247e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002486:	b29b      	uxth	r3, r3
 8002488:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11f      	bne.n	80024d4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	83bb      	strh	r3, [r7, #28]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	441a      	add	r2, r3
 80024be:	8bbb      	ldrh	r3, [r7, #28]
 80024c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024d4:	8b7b      	ldrh	r3, [r7, #26]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6959      	ldr	r1, [r3, #20]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	895a      	ldrh	r2, [r3, #10]
 80024e6:	8b7b      	ldrh	r3, [r7, #26]
 80024e8:	f004 f90f 	bl	800670a <USB_ReadPMA>
    }
  }

  return count;
 80024ec:	8b7b      	ldrh	r3, [r7, #26]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b0a2      	sub	sp, #136	; 0x88
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	4613      	mov	r3, r2
 8002502:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 81c7 	beq.w	800289e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	3302      	adds	r3, #2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002538:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002544:	429a      	cmp	r2, r3
 8002546:	d907      	bls.n	8002558 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002550:	1ad2      	subs	r2, r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	e002      	b.n	800255e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80b9 	bne.w	80026da <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d126      	bne.n	80025be <HAL_PCD_EP_DB_Transmit+0xc8>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	4413      	add	r3, r2
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	011a      	lsls	r2, r3, #4
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	4413      	add	r3, r2
 8002592:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	801a      	strh	r2, [r3, #0]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	e01a      	b.n	80025f4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d116      	bne.n	80025f4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	4413      	add	r3, r2
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	011a      	lsls	r2, r3, #4
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	4413      	add	r3, r2
 80025e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f0:	2200      	movs	r2, #0
 80025f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d126      	bne.n	8002650 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002610:	b29b      	uxth	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	011a      	lsls	r2, r3, #4
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002634:	b29a      	uxth	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002648:	b29a      	uxth	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	e017      	b.n	8002680 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d113      	bne.n	8002680 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	4413      	add	r3, r2
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	011a      	lsls	r2, r3, #4
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	4413      	add	r3, r2
 8002674:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	2200      	movs	r2, #0
 800267e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f005 fa6b 	bl	8007b62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 82d4 	beq.w	8002c40 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	827b      	strh	r3, [r7, #18]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	8a7b      	ldrh	r3, [r7, #18]
 80026c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	8013      	strh	r3, [r2, #0]
 80026d8:	e2b2      	b.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d021      	beq.n	8002728 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	441a      	add	r2, r3
 8002710:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800271c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002724:	b29b      	uxth	r3, r3
 8002726:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800272e:	2b01      	cmp	r3, #1
 8002730:	f040 8286 	bne.w	8002c40 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800273c:	441a      	add	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800274a:	441a      	add	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d309      	bcc.n	8002770 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	621a      	str	r2, [r3, #32]
 800276e:	e015      	b.n	800279c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800277c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002786:	e009      	b.n	800279c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	785b      	ldrb	r3, [r3, #1]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d155      	bne.n	8002850 <HAL_PCD_EP_DB_Transmit+0x35a>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	4413      	add	r3, r2
 80027ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	011a      	lsls	r2, r3, #4
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	4413      	add	r3, r2
 80027c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d112      	bne.n	80027f8 <HAL_PCD_EP_DB_Transmit+0x302>
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027dc:	b29a      	uxth	r2, r3
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	e047      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x392>
 80027f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fa:	2b3e      	cmp	r3, #62	; 0x3e
 80027fc:	d811      	bhi.n	8002822 <HAL_PCD_EP_DB_Transmit+0x32c>
 80027fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	64bb      	str	r3, [r7, #72]	; 0x48
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_PCD_EP_DB_Transmit+0x31e>
 800280e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002810:	3301      	adds	r3, #1
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
 8002814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002816:	b29b      	uxth	r3, r3
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	b29a      	uxth	r2, r3
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	801a      	strh	r2, [r3, #0]
 8002820:	e032      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x392>
 8002822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
 8002828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_PCD_EP_DB_Transmit+0x342>
 8002832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002834:	3b01      	subs	r3, #1
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
 8002838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283a:	b29b      	uxth	r3, r3
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	b29b      	uxth	r3, r3
 8002840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002848:	b29a      	uxth	r2, r3
 800284a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	e01b      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x392>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	785b      	ldrb	r3, [r3, #1]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d117      	bne.n	8002888 <HAL_PCD_EP_DB_Transmit+0x392>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286c:	4413      	add	r3, r2
 800286e:	643b      	str	r3, [r7, #64]	; 0x40
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	011a      	lsls	r2, r3, #4
 8002876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002878:	4413      	add	r3, r2
 800287a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002882:	b29a      	uxth	r2, r3
 8002884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002886:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6959      	ldr	r1, [r3, #20]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	891a      	ldrh	r2, [r3, #8]
 8002894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002896:	b29b      	uxth	r3, r3
 8002898:	f003 fef2 	bl	8006680 <USB_WritePMA>
 800289c:	e1d0      	b.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	3306      	adds	r3, #6
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d307      	bcc.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028de:	1ad2      	subs	r2, r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	619a      	str	r2, [r3, #24]
 80028e4:	e002      	b.n	80028ec <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 80c4 	bne.w	8002a7e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	785b      	ldrb	r3, [r3, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d126      	bne.n	800294c <HAL_PCD_EP_DB_Transmit+0x456>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290c:	b29b      	uxth	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	4413      	add	r3, r2
 8002914:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	011a      	lsls	r2, r3, #4
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	4413      	add	r3, r2
 8002920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002924:	66bb      	str	r3, [r7, #104]	; 0x68
 8002926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002930:	b29a      	uxth	r2, r3
 8002932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002944:	b29a      	uxth	r2, r3
 8002946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	e01a      	b.n	8002982 <HAL_PCD_EP_DB_Transmit+0x48c>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	785b      	ldrb	r3, [r3, #1]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d116      	bne.n	8002982 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	677b      	str	r3, [r7, #116]	; 0x74
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002968:	4413      	add	r3, r2
 800296a:	677b      	str	r3, [r7, #116]	; 0x74
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	011a      	lsls	r2, r3, #4
 8002972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002974:	4413      	add	r3, r2
 8002976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800297a:	673b      	str	r3, [r7, #112]	; 0x70
 800297c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	67bb      	str	r3, [r7, #120]	; 0x78
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	785b      	ldrb	r3, [r3, #1]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d12f      	bne.n	80029f0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a8:	4413      	add	r3, r2
 80029aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	011a      	lsls	r2, r3, #4
 80029b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029b8:	4413      	add	r3, r2
 80029ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	e017      	b.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x52a>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d113      	bne.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x52a>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a06:	4413      	add	r3, r2
 8002a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	011a      	lsls	r2, r3, #4
 8002a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a12:	4413      	add	r3, r2
 8002a14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f005 f89b 	bl	8007b62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 8104 	bne.w	8002c40 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	441a      	add	r2, r3
 8002a64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	8013      	strh	r3, [r2, #0]
 8002a7c:	e0e0      	b.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d121      	bne.n	8002acc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	441a      	add	r2, r3
 8002ab4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	f040 80b4 	bne.w	8002c40 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ae0:	441a      	add	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aee:	441a      	add	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d309      	bcc.n	8002b14 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	621a      	str	r2, [r3, #32]
 8002b12:	e015      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002b1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b2a:	e009      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	667b      	str	r3, [r7, #100]	; 0x64
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d155      	bne.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x704>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b62:	4413      	add	r3, r2
 8002b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	011a      	lsls	r2, r3, #4
 8002b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6e:	4413      	add	r3, r2
 8002b70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d112      	bne.n	8002ba2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8a:	801a      	strh	r2, [r3, #0]
 8002b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9e:	801a      	strh	r2, [r3, #0]
 8002ba0:	e044      	b.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x736>
 8002ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ba6:	d811      	bhi.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	657b      	str	r3, [r7, #84]	; 0x54
 8002bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bba:	3301      	adds	r3, #1
 8002bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	029b      	lsls	r3, r3, #10
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	e02f      	b.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x736>
 8002bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	3b01      	subs	r3, #1
 8002be0:	657b      	str	r3, [r7, #84]	; 0x54
 8002be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	029b      	lsls	r3, r3, #10
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf6:	801a      	strh	r2, [r3, #0]
 8002bf8:	e018      	b.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x736>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d114      	bne.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x736>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c10:	4413      	add	r3, r2
 8002c12:	667b      	str	r3, [r7, #100]	; 0x64
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	011a      	lsls	r2, r3, #4
 8002c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c22:	663b      	str	r3, [r7, #96]	; 0x60
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c2a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6959      	ldr	r1, [r3, #20]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	895a      	ldrh	r2, [r3, #10]
 8002c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f003 fd20 	bl	8006680 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c5a:	823b      	strh	r3, [r7, #16]
 8002c5c:	8a3b      	ldrh	r3, [r7, #16]
 8002c5e:	f083 0310 	eor.w	r3, r3, #16
 8002c62:	823b      	strh	r3, [r7, #16]
 8002c64:	8a3b      	ldrh	r3, [r7, #16]
 8002c66:	f083 0320 	eor.w	r3, r3, #32
 8002c6a:	823b      	strh	r3, [r7, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	8a3b      	ldrh	r3, [r7, #16]
 8002c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3788      	adds	r7, #136	; 0x88
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	817b      	strh	r3, [r7, #10]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb8:	897b      	ldrh	r3, [r7, #10]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e009      	b.n	8002ce4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd0:	897a      	ldrh	r2, [r7, #10]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ce4:	893b      	ldrh	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	80da      	strh	r2, [r3, #6]
 8002cf8:	e00b      	b.n	8002d12 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0c1b      	lsrs	r3, r3, #16
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e272      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8087 	beq.w	8002e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d40:	4b92      	ldr	r3, [pc, #584]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4c:	4b8f      	ldr	r3, [pc, #572]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d112      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e>
 8002d58:	4b8c      	ldr	r3, [pc, #560]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d10b      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d66:	4b89      	ldr	r3, [pc, #548]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d06c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x12c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d168      	bne.n	8002e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e24c      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x76>
 8002d88:	4b80      	ldr	r3, [pc, #512]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a7f      	ldr	r2, [pc, #508]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e02e      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x98>
 8002d9e:	4b7b      	ldr	r3, [pc, #492]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7a      	ldr	r2, [pc, #488]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b78      	ldr	r3, [pc, #480]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a77      	ldr	r2, [pc, #476]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0xbc>
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a71      	ldr	r2, [pc, #452]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6f      	ldr	r3, [pc, #444]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6e      	ldr	r2, [pc, #440]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002ddc:	4b6b      	ldr	r3, [pc, #428]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6a      	ldr	r2, [pc, #424]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a67      	ldr	r2, [pc, #412]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fd fff2 	bl	8000de4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fd ffee 	bl	8000de4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e200      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe4>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fd ffde 	bl	8000de4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fd ffda 	bl	8000de4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1ec      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x10c>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e5a:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e66:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x18c>
 8002e72:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x176>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1c0      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4939      	ldr	r1, [pc, #228]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e03a      	b.n	8002f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fd ff93 	bl	8000de4 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fd ff8f 	bl	8000de4 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1a1      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4927      	ldr	r1, [pc, #156]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fd ff72 	bl	8000de4 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f04:	f7fd ff6e 	bl	8000de4 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e180      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03a      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d019      	beq.n	8002f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fd ff52 	bl	8000de4 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fd ff4e 	bl	8000de4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e160      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 fac6 	bl	80034f4 <RCC_Delay>
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fd ff38 	bl	8000de4 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f76:	e00f      	b.n	8002f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fd ff34 	bl	8000de4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d908      	bls.n	8002f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e146      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	42420000 	.word	0x42420000
 8002f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	4b92      	ldr	r3, [pc, #584]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e9      	bne.n	8002f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a6 	beq.w	80030fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4a87      	ldr	r2, [pc, #540]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	61d3      	str	r3, [r2, #28]
 8002fce:	4b85      	ldr	r3, [pc, #532]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	4b82      	ldr	r3, [pc, #520]	; (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d118      	bne.n	800301c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fea:	4b7f      	ldr	r3, [pc, #508]	; (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7e      	ldr	r2, [pc, #504]	; (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fd fef5 	bl	8000de4 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffe:	f7fd fef1 	bl	8000de4 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	; 0x64
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e103      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x312>
 8003024:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a6e      	ldr	r2, [pc, #440]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	e02d      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x334>
 800303a:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a69      	ldr	r2, [pc, #420]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4a66      	ldr	r2, [pc, #408]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	6213      	str	r3, [r2, #32]
 8003052:	e01c      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0x356>
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a60      	ldr	r2, [pc, #384]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a5d      	ldr	r2, [pc, #372]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	e00b      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003076:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a5a      	ldr	r2, [pc, #360]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6213      	str	r3, [r2, #32]
 8003082:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4a57      	ldr	r2, [pc, #348]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d015      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fd fea5 	bl	8000de4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fd fea1 	bl	8000de4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0b1      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ee      	beq.n	800309e <HAL_RCC_OscConfig+0x37e>
 80030c0:	e014      	b.n	80030ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fd fe8f 	bl	8000de4 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fd fe8b 	bl	8000de4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e09b      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b3c      	ldr	r3, [pc, #240]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a3b      	ldr	r2, [pc, #236]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8087 	beq.w	8003216 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d061      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d146      	bne.n	80031aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	4b33      	ldr	r3, [pc, #204]	; (80031ec <HAL_RCC_OscConfig+0x4cc>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fd fe5f 	bl	8000de4 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7fd fe5b 	bl	8000de4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e06d      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313c:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d108      	bne.n	8003164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4921      	ldr	r1, [pc, #132]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a19      	ldr	r1, [r3, #32]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	430b      	orrs	r3, r1
 8003176:	491b      	ldr	r1, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x4cc>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fd fe2f 	bl	8000de4 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fd fe2b 	bl	8000de4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e03d      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x46a>
 80031a8:	e035      	b.n	8003216 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_RCC_OscConfig+0x4cc>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd fe18 	bl	8000de4 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd fe14 	bl	8000de4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e026      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x498>
 80031d6:	e01e      	b.n	8003216 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e019      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
 80031ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_OscConfig+0x500>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0d0      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d910      	bls.n	8003268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	4965      	ldr	r1, [pc, #404]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0b8      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003280:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800328a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	494d      	ldr	r1, [pc, #308]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d040      	beq.n	8003344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d115      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07f      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e073      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06b      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4936      	ldr	r1, [pc, #216]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fd fd66 	bl	8000de4 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fd fd62 	bl	8000de4 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e053      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d210      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4922      	ldr	r1, [pc, #136]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e032      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4916      	ldr	r1, [pc, #88]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	490e      	ldr	r1, [pc, #56]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033b2:	f000 f82d 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490a      	ldr	r1, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_RCC_ClockConfig+0x1cc>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x1d0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd fcc4 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08008134 	.word	0x08008134
 80033f0:	20000000 	.word	0x20000000
 80033f4:	2000005c 	.word	0x2000005c

080033f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <HAL_RCC_EnableCSS+0x14>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	4242004c 	.word	0x4242004c

08003410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b490      	push	{r4, r7}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_GetSysClockFreq+0xac>)
 8003418:	1d3c      	adds	r4, r7, #4
 800341a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800341c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003420:	f240 2301 	movw	r3, #513	; 0x201
 8003424:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800343a:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b04      	cmp	r3, #4
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x40>
 800344a:	2b08      	cmp	r3, #8
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x46>
 800344e:	e02b      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003450:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003452:	623b      	str	r3, [r7, #32]
      break;
 8003454:	e02b      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	0c9b      	lsrs	r3, r3, #18
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	3328      	adds	r3, #40	; 0x28
 8003460:	443b      	add	r3, r7
 8003462:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003466:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	3328      	adds	r3, #40	; 0x28
 800347e:	443b      	add	r3, r7
 8003480:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003484:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800348a:	fb03 f202 	mul.w	r2, r3, r2
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
 8003496:	e004      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	623b      	str	r3, [r7, #32]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034aa:	623b      	str	r3, [r7, #32]
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6a3b      	ldr	r3, [r7, #32]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc90      	pop	{r4, r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	080080c4 	.word	0x080080c4
 80034c0:	40021000 	.word	0x40021000
 80034c4:	007a1200 	.word	0x007a1200
 80034c8:	003d0900 	.word	0x003d0900

080034cc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_NMI_IRQHandler+0x20>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d104      	bne.n	80034e6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80034dc:	f000 f828 	bl	8003530 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	701a      	strb	r2, [r3, #0]
  }
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	4002100a 	.word	0x4002100a

080034f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <RCC_Delay+0x34>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <RCC_Delay+0x38>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0a5b      	lsrs	r3, r3, #9
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003510:	bf00      	nop
  }
  while (Delay --);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	60fa      	str	r2, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f9      	bne.n	8003510 <RCC_Delay+0x1c>
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	20000000 	.word	0x20000000
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d07d      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355c:	4b4f      	ldr	r3, [pc, #316]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003568:	4b4c      	ldr	r3, [pc, #304]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4a4b      	ldr	r2, [pc, #300]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003572:	61d3      	str	r3, [r2, #28]
 8003574:	4b49      	ldr	r3, [pc, #292]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d118      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003590:	4b43      	ldr	r3, [pc, #268]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a42      	ldr	r2, [pc, #264]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359c:	f7fd fc22 	bl	8000de4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	e008      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fd fc1e 	bl	8000de4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e06d      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d02e      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d027      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e0:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ea:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f0:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035f6:	4a29      	ldr	r2, [pc, #164]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d014      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fd fbed 	bl	8000de4 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd fbe9 	bl	8000de4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e036      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ee      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4917      	ldr	r1, [pc, #92]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	4313      	orrs	r3, r2
 8003640:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4a13      	ldr	r2, [pc, #76]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003652:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	490b      	ldr	r1, [pc, #44]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4904      	ldr	r1, [pc, #16]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
 80036a4:	42420440 	.word	0x42420440

080036a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e041      	b.n	800373e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd f8e0 	bl	8000894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 f93c 	bl	8003964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d001      	beq.n	8003760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_TIM_Base_Start+0x88>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_Base_Start+0x48>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377a:	d009      	beq.n	8003790 <HAL_TIM_Base_Start+0x48>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_TIM_Base_Start+0x8c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start+0x48>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <HAL_TIM_Base_Start+0x90>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d010      	beq.n	80037c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	e007      	b.n	80037c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800

080037dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_TIM_ConfigClockSource+0x18>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e0b3      	b.n	800395c <HAL_TIM_ConfigClockSource+0x180>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382c:	d03e      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0xd0>
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003832:	f200 8087 	bhi.w	8003944 <HAL_TIM_ConfigClockSource+0x168>
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	f000 8085 	beq.w	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d87f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x168>
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	d01a      	beq.n	800387e <HAL_TIM_ConfigClockSource+0xa2>
 8003848:	2b70      	cmp	r3, #112	; 0x70
 800384a:	d87b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x168>
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	d050      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x116>
 8003850:	2b60      	cmp	r3, #96	; 0x60
 8003852:	d877      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x168>
 8003854:	2b50      	cmp	r3, #80	; 0x50
 8003856:	d03c      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xf6>
 8003858:	2b50      	cmp	r3, #80	; 0x50
 800385a:	d873      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x168>
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d058      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x136>
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d86f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x168>
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d064      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x156>
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d86b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x168>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d060      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x156>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d867      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x168>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x156>
 8003878:	2b10      	cmp	r3, #16
 800387a:	d05a      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800387c:	e062      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f000 f942 	bl	8003b16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	609a      	str	r2, [r3, #8]
      break;
 80038aa:	e04e      	b.n	800394a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f000 f92b 	bl	8003b16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ce:	609a      	str	r2, [r3, #8]
      break;
 80038d0:	e03b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 f8a2 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2150      	movs	r1, #80	; 0x50
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f8f9 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 80038f0:	e02b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	461a      	mov	r2, r3
 8003900:	f000 f8c0 	bl	8003a84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2160      	movs	r1, #96	; 0x60
 800390a:	4618      	mov	r0, r3
 800390c:	f000 f8e9 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 8003910:	e01b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	f000 f882 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2140      	movs	r1, #64	; 0x40
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f8d9 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 8003930:	e00b      	b.n	800394a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 f8d0 	bl	8003ae2 <TIM_ITRx_SetConfig>
        break;
 8003942:	e002      	b.n	800394a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003948:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <TIM_Base_SetConfig+0xb8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00b      	beq.n	8003994 <TIM_Base_SetConfig+0x30>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0x30>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <TIM_Base_SetConfig+0xbc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0x30>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <TIM_Base_SetConfig+0xc0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1c      	ldr	r2, [pc, #112]	; (8003a1c <TIM_Base_SetConfig+0xb8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <TIM_Base_SetConfig+0x62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d007      	beq.n	80039c6 <TIM_Base_SetConfig+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <TIM_Base_SetConfig+0xbc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_Base_SetConfig+0x62>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <TIM_Base_SetConfig+0xc0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d108      	bne.n	80039d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <TIM_Base_SetConfig+0xb8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d103      	bne.n	8003a0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	615a      	str	r2, [r3, #20]
}
 8003a12:	bf00      	nop
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800

08003a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 030a 	bic.w	r3, r3, #10
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f023 0210 	bic.w	r2, r3, #16
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	031b      	lsls	r3, r3, #12
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	621a      	str	r2, [r3, #32]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f043 0307 	orr.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	021a      	lsls	r2, r3, #8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e046      	b.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00e      	beq.n	8003bce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d009      	beq.n	8003bce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10c      	bne.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800

08003c10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c10:	b084      	sub	sp, #16
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	f107 0014 	add.w	r0, r7, #20
 8003c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	b004      	add	sp, #16
 8003c2e:	4770      	bx	lr

08003c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ca8:	b084      	sub	sp, #16
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	f107 0014 	add.w	r0, r7, #20
 8003cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	b004      	add	sp, #16
 8003ce6:	4770      	bx	lr

08003ce8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b09b      	sub	sp, #108	; 0x6c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	78db      	ldrb	r3, [r3, #3]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d81f      	bhi.n	8003d5a <USB_ActivateEndpoint+0x72>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <USB_ActivateEndpoint+0x38>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d4d 	.word	0x08003d4d
 8003d28:	08003d63 	.word	0x08003d63
 8003d2c:	08003d3f 	.word	0x08003d3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d3c:	e012      	b.n	8003d64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d4a:	e00b      	b.n	8003d64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d54:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d58:	e004      	b.n	8003d64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003d60:	e000      	b.n	8003d64 <USB_ActivateEndpoint+0x7c>
      break;
 8003d62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	441a      	add	r2, r3
 8003d6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	7b1b      	ldrb	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 8149 	bne.w	8004068 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8084 	beq.w	8003ee8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	011a      	lsls	r2, r3, #4
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	88db      	ldrh	r3, [r3, #6]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	81fb      	strh	r3, [r7, #14]
 8003e22:	89fb      	ldrh	r3, [r7, #14]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01b      	beq.n	8003e64 <USB_ActivateEndpoint+0x17c>
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	81bb      	strh	r3, [r7, #12]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	89bb      	ldrh	r3, [r7, #12]
 8003e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	78db      	ldrb	r3, [r3, #3]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d020      	beq.n	8003eae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e82:	813b      	strh	r3, [r7, #8]
 8003e84:	893b      	ldrh	r3, [r7, #8]
 8003e86:	f083 0320 	eor.w	r3, r3, #32
 8003e8a:	813b      	strh	r3, [r7, #8]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	893b      	ldrh	r3, [r7, #8]
 8003e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]
 8003eac:	e27f      	b.n	80043ae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec4:	817b      	strh	r3, [r7, #10]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	897b      	ldrh	r3, [r7, #10]
 8003ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8013      	strh	r3, [r2, #0]
 8003ee6:	e262      	b.n	80043ae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	4413      	add	r3, r2
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	011a      	lsls	r2, r3, #4
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	88db      	ldrh	r3, [r3, #6]
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	4413      	add	r3, r2
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	011a      	lsls	r2, r3, #4
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	4413      	add	r3, r2
 8003f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d112      	bne.n	8003f6e <USB_ActivateEndpoint+0x286>
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e02f      	b.n	8003fce <USB_ActivateEndpoint+0x2e6>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b3e      	cmp	r3, #62	; 0x3e
 8003f74:	d813      	bhi.n	8003f9e <USB_ActivateEndpoint+0x2b6>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <USB_ActivateEndpoint+0x2a8>
 8003f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	029b      	lsls	r3, r3, #10
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	e017      	b.n	8003fce <USB_ActivateEndpoint+0x2e6>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <USB_ActivateEndpoint+0x2d0>
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	029b      	lsls	r3, r3, #10
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	83fb      	strh	r3, [r7, #30]
 8003fdc:	8bfb      	ldrh	r3, [r7, #30]
 8003fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01b      	beq.n	800401e <USB_ActivateEndpoint+0x336>
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffc:	83bb      	strh	r3, [r7, #28]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	441a      	add	r2, r3
 8004008:	8bbb      	ldrh	r3, [r7, #28]
 800400a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800400e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401a:	b29b      	uxth	r3, r3
 800401c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	837b      	strh	r3, [r7, #26]
 8004036:	8b7b      	ldrh	r3, [r7, #26]
 8004038:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800403c:	837b      	strh	r3, [r7, #26]
 800403e:	8b7b      	ldrh	r3, [r7, #26]
 8004040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004044:	837b      	strh	r3, [r7, #26]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	8b7b      	ldrh	r3, [r7, #26]
 8004052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]
 8004066:	e1a2      	b.n	80043ae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004098:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800409c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b4:	4413      	add	r3, r2
 80040b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	011a      	lsls	r2, r3, #4
 80040be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c6:	657b      	str	r3, [r7, #84]	; 0x54
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	891b      	ldrh	r3, [r3, #8]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	653b      	str	r3, [r7, #80]	; 0x50
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e8:	4413      	add	r3, r2
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	011a      	lsls	r2, r3, #4
 80040f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	895b      	ldrh	r3, [r3, #10]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	785b      	ldrb	r3, [r3, #1]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 8091 	bne.w	8004238 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004124:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01b      	beq.n	8004166 <USB_ActivateEndpoint+0x47e>
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004144:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	441a      	add	r2, r3
 8004150:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800415e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004162:	b29b      	uxth	r3, r3
 8004164:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	873b      	strh	r3, [r7, #56]	; 0x38
 8004174:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01b      	beq.n	80041b6 <USB_ActivateEndpoint+0x4ce>
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004194:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	441a      	add	r2, r3
 80041e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004214:	867b      	strh	r3, [r7, #50]	; 0x32
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]
 8004236:	e0ba      	b.n	80043ae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004248:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800424c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01d      	beq.n	8004290 <USB_ActivateEndpoint+0x5a8>
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	441a      	add	r2, r3
 8004278:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800427c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428c:	b29b      	uxth	r3, r3
 800428e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01d      	beq.n	80042e8 <USB_ActivateEndpoint+0x600>
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	78db      	ldrb	r3, [r3, #3]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d024      	beq.n	800433a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800430a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800430e:	f083 0320 	eor.w	r3, r3, #32
 8004312:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
 8004338:	e01d      	b.n	8004376 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004350:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004372:	b29b      	uxth	r3, r3
 8004374:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800439a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80043ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	376c      	adds	r7, #108	; 0x6c
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043bc:	b480      	push	{r7}
 80043be:	b08d      	sub	sp, #52	; 0x34
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	7b1b      	ldrb	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 808e 	bne.w	80044ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d044      	beq.n	8004462 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	81bb      	strh	r3, [r7, #12]
 80043e6:	89bb      	ldrh	r3, [r7, #12]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01b      	beq.n	8004428 <USB_DeactivateEndpoint+0x6c>
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	817b      	strh	r3, [r7, #10]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	897b      	ldrh	r3, [r7, #10]
 8004414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004424:	b29b      	uxth	r3, r3
 8004426:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443e:	813b      	strh	r3, [r7, #8]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	893b      	ldrh	r3, [r7, #8]
 800444c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445c:	b29b      	uxth	r3, r3
 800445e:	8013      	strh	r3, [r2, #0]
 8004460:	e192      	b.n	8004788 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	827b      	strh	r3, [r7, #18]
 8004470:	8a7b      	ldrh	r3, [r7, #18]
 8004472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01b      	beq.n	80044b2 <USB_DeactivateEndpoint+0xf6>
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	823b      	strh	r3, [r7, #16]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	441a      	add	r2, r3
 800449c:	8a3b      	ldrh	r3, [r7, #16]
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c8:	81fb      	strh	r3, [r7, #14]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	89fb      	ldrh	r3, [r7, #14]
 80044d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]
 80044ea:	e14d      	b.n	8004788 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 80a5 	bne.w	8004640 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	843b      	strh	r3, [r7, #32]
 8004504:	8c3b      	ldrh	r3, [r7, #32]
 8004506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01b      	beq.n	8004546 <USB_DeactivateEndpoint+0x18a>
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	83fb      	strh	r3, [r7, #30]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	8bfb      	ldrh	r3, [r7, #30]
 8004532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800453a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800453e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004542:	b29b      	uxth	r3, r3
 8004544:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	83bb      	strh	r3, [r7, #28]
 8004554:	8bbb      	ldrh	r3, [r7, #28]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <USB_DeactivateEndpoint+0x1da>
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	837b      	strh	r3, [r7, #26]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	441a      	add	r2, r3
 8004580:	8b7b      	ldrh	r3, [r7, #26]
 8004582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800458a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004592:	b29b      	uxth	r3, r3
 8004594:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ac:	833b      	strh	r3, [r7, #24]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	441a      	add	r2, r3
 80045b8:	8b3b      	ldrh	r3, [r7, #24]
 80045ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e4:	82fb      	strh	r3, [r7, #22]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	8afb      	ldrh	r3, [r7, #22]
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461c:	82bb      	strh	r3, [r7, #20]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	8abb      	ldrh	r3, [r7, #20]
 800462a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
 800463e:	e0a3      	b.n	8004788 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800464e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <USB_DeactivateEndpoint+0x2d4>
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800469e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <USB_DeactivateEndpoint+0x324>
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	853b      	strh	r3, [r7, #40]	; 0x28
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004714:	b29b      	uxth	r3, r3
 8004716:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	441a      	add	r2, r3
 800473a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800473c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474c:	b29b      	uxth	r3, r3
 800474e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	847b      	strh	r3, [r7, #34]	; 0x22
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	b29b      	uxth	r3, r3
 8004786:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3734      	adds	r7, #52	; 0x34
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b0cc      	sub	sp, #304	; 0x130
 8004798:	af00      	add	r7, sp, #0
 800479a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047a2:	6018      	str	r0, [r3, #0]
 80047a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f041 817d 	bne.w	8005aba <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80047c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d908      	bls.n	80047ee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80047dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80047ec:	e007      	b.n	80047fe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80047ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	7b1b      	ldrb	r3, [r3, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d152      	bne.n	80048b4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800480e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6959      	ldr	r1, [r3, #20]
 800481a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	88da      	ldrh	r2, [r3, #6]
 8004826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800482a:	b29b      	uxth	r3, r3
 800482c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004830:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004834:	6800      	ldr	r0, [r0, #0]
 8004836:	f001 ff23 	bl	8006680 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800483a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004842:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004846:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	4619      	mov	r1, r3
 8004860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004864:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004868:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800486c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	440a      	add	r2, r1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	011a      	lsls	r2, r3, #4
 8004884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004888:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4413      	add	r3, r2
 8004890:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004898:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	f001 b8b5 	b.w	8005a1e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	78db      	ldrb	r3, [r3, #3]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	f040 84c6 	bne.w	8005252 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80048c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	f240 8443 	bls.w	800516a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80048e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800490e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	441a      	add	r2, r3
 8004928:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004934:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004950:	1ad2      	subs	r2, r2, r3
 8004952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800495e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004962:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 823e 	beq.w	8004e02 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800498e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004992:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 809a 	bne.w	8004ae0 <USB_EPStartXfer+0x34c>
 80049ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	4619      	mov	r1, r3
 80049d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049de:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	440a      	add	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	011a      	lsls	r2, r3, #4
 80049f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4413      	add	r3, r2
 8004a02:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d122      	bne.n	8004a5e <USB_EPStartXfer+0x2ca>
 8004a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	e079      	b.n	8004b52 <USB_EPStartXfer+0x3be>
 8004a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a62:	2b3e      	cmp	r3, #62	; 0x3e
 8004a64:	d81b      	bhi.n	8004a9e <USB_EPStartXfer+0x30a>
 8004a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <USB_EPStartXfer+0x2f2>
 8004a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a80:	3301      	adds	r3, #1
 8004a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	801a      	strh	r2, [r3, #0]
 8004a9c:	e059      	b.n	8004b52 <USB_EPStartXfer+0x3be>
 8004a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <USB_EPStartXfer+0x32a>
 8004ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	e038      	b.n	8004b52 <USB_EPStartXfer+0x3be>
 8004ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d130      	bne.n	8004b52 <USB_EPStartXfer+0x3be>
 8004af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	4619      	mov	r1, r3
 8004b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b0e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	440a      	add	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	011a      	lsls	r2, r3, #4
 8004b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4413      	add	r3, r2
 8004b32:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	895b      	ldrh	r3, [r3, #10]
 8004b5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6959      	ldr	r1, [r3, #20]
 8004b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b80:	6800      	ldr	r0, [r0, #0]
 8004b82:	f001 fd7d 	bl	8006680 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b96:	441a      	add	r2, r3
 8004b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d90f      	bls.n	8004be0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd0:	1ad2      	subs	r2, r2, r3
 8004bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	621a      	str	r2, [r3, #32]
 8004bde:	e00e      	b.n	8004bfe <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 809a 	bne.w	8004d44 <USB_EPStartXfer+0x5b0>
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c1c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	4619      	mov	r1, r3
 8004c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c42:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	440a      	add	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	011a      	lsls	r2, r3, #4
 8004c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d122      	bne.n	8004cc2 <USB_EPStartXfer+0x52e>
 8004c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	e083      	b.n	8004dca <USB_EPStartXfer+0x636>
 8004cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cc8:	d81b      	bhi.n	8004d02 <USB_EPStartXfer+0x56e>
 8004cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <USB_EPStartXfer+0x556>
 8004ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004cea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	029b      	lsls	r3, r3, #10
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	e063      	b.n	8004dca <USB_EPStartXfer+0x636>
 8004d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <USB_EPStartXfer+0x58e>
 8004d18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	e042      	b.n	8004dca <USB_EPStartXfer+0x636>
 8004d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d13a      	bne.n	8004dca <USB_EPStartXfer+0x636>
 8004d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d60:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d86:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	011a      	lsls	r2, r3, #4
 8004d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4413      	add	r3, r2
 8004daa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	891b      	ldrh	r3, [r3, #8]
 8004dd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6959      	ldr	r1, [r3, #20]
 8004de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004df0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004df4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004df8:	6800      	ldr	r0, [r0, #0]
 8004dfa:	f001 fc41 	bl	8006680 <USB_WritePMA>
 8004dfe:	f000 be0e 	b.w	8005a1e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d16d      	bne.n	8004eee <USB_EPStartXfer+0x75a>
 8004e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e32:	4413      	add	r3, r2
 8004e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	011a      	lsls	r2, r3, #4
 8004e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e46:	4413      	add	r3, r2
 8004e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d112      	bne.n	8004e7c <USB_EPStartXfer+0x6e8>
 8004e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e78:	801a      	strh	r2, [r3, #0]
 8004e7a:	e063      	b.n	8004f44 <USB_EPStartXfer+0x7b0>
 8004e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e80:	2b3e      	cmp	r3, #62	; 0x3e
 8004e82:	d817      	bhi.n	8004eb4 <USB_EPStartXfer+0x720>
 8004e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d004      	beq.n	8004ea4 <USB_EPStartXfer+0x710>
 8004e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ea4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	029b      	lsls	r3, r3, #10
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb0:	801a      	strh	r2, [r3, #0]
 8004eb2:	e047      	b.n	8004f44 <USB_EPStartXfer+0x7b0>
 8004eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d104      	bne.n	8004ed4 <USB_EPStartXfer+0x740>
 8004eca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	029b      	lsls	r3, r3, #10
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	e02a      	b.n	8004f44 <USB_EPStartXfer+0x7b0>
 8004eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d122      	bne.n	8004f44 <USB_EPStartXfer+0x7b0>
 8004efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	653b      	str	r3, [r7, #80]	; 0x50
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1e:	4413      	add	r3, r2
 8004f20:	653b      	str	r3, [r7, #80]	; 0x50
 8004f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	011a      	lsls	r2, r3, #4
 8004f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f32:	4413      	add	r3, r2
 8004f34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	891b      	ldrh	r3, [r3, #8]
 8004f50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6959      	ldr	r1, [r3, #20]
 8004f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f6a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f6e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f72:	6800      	ldr	r0, [r0, #0]
 8004f74:	f001 fb84 	bl	8006680 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f88:	441a      	add	r2, r3
 8004f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a1a      	ldr	r2, [r3, #32]
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d90f      	bls.n	8004fd2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	621a      	str	r2, [r3, #32]
 8004fd0:	e00e      	b.n	8004ff0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d16d      	bne.n	80050e8 <USB_EPStartXfer+0x954>
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005026:	b29b      	uxth	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	4413      	add	r3, r2
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	011a      	lsls	r2, r3, #4
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	4413      	add	r3, r2
 8005042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
 8005048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d112      	bne.n	8005076 <USB_EPStartXfer+0x8e2>
 8005050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800505a:	b29a      	uxth	r2, r3
 800505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800506a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506e:	b29a      	uxth	r2, r3
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e05d      	b.n	8005132 <USB_EPStartXfer+0x99e>
 8005076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507a:	2b3e      	cmp	r3, #62	; 0x3e
 800507c:	d817      	bhi.n	80050ae <USB_EPStartXfer+0x91a>
 800507e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <USB_EPStartXfer+0x90a>
 8005094:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005098:	3301      	adds	r3, #1
 800509a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800509e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	029b      	lsls	r3, r3, #10
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	e041      	b.n	8005132 <USB_EPStartXfer+0x99e>
 80050ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <USB_EPStartXfer+0x93a>
 80050c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050c8:	3b01      	subs	r3, #1
 80050ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	029b      	lsls	r3, r3, #10
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	e024      	b.n	8005132 <USB_EPStartXfer+0x99e>
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d11c      	bne.n	8005132 <USB_EPStartXfer+0x99e>
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800510c:	4413      	add	r3, r2
 800510e:	643b      	str	r3, [r7, #64]	; 0x40
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	011a      	lsls	r2, r3, #4
 800511e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005120:	4413      	add	r3, r2
 8005122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512c:	b29a      	uxth	r2, r3
 800512e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005130:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	895b      	ldrh	r3, [r3, #10]
 800513e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6959      	ldr	r1, [r3, #20]
 800514e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005152:	b29b      	uxth	r3, r3
 8005154:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005158:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800515c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005160:	6800      	ldr	r0, [r0, #0]
 8005162:	f001 fa8d 	bl	8006680 <USB_WritePMA>
 8005166:	f000 bc5a 	b.w	8005a1e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800516a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80051a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051f6:	4413      	add	r3, r2
 80051f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	011a      	lsls	r2, r3, #4
 8005208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800520a:	4413      	add	r3, r2
 800520c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005210:	65bb      	str	r3, [r7, #88]	; 0x58
 8005212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005216:	b29a      	uxth	r2, r3
 8005218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800521c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	891b      	ldrh	r3, [r3, #8]
 8005228:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800522c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6959      	ldr	r1, [r3, #20]
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	b29b      	uxth	r3, r3
 800523e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005242:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005246:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	f001 fa18 	bl	8006680 <USB_WritePMA>
 8005250:	e3e5      	b.n	8005a1e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800527c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800529a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80052ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6a1a      	ldr	r2, [r3, #32]
 80052ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 81bc 	beq.w	800566c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d16d      	bne.n	80053ee <USB_EPStartXfer+0xc5a>
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	67bb      	str	r3, [r7, #120]	; 0x78
 800531e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005322:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532c:	b29b      	uxth	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005332:	4413      	add	r3, r2
 8005334:	67bb      	str	r3, [r7, #120]	; 0x78
 8005336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	011a      	lsls	r2, r3, #4
 8005344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005346:	4413      	add	r3, r2
 8005348:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800534c:	677b      	str	r3, [r7, #116]	; 0x74
 800534e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d112      	bne.n	800537c <USB_EPStartXfer+0xbe8>
 8005356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005360:	b29a      	uxth	r2, r3
 8005362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005374:	b29a      	uxth	r2, r3
 8005376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	e060      	b.n	800543e <USB_EPStartXfer+0xcaa>
 800537c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005380:	2b3e      	cmp	r3, #62	; 0x3e
 8005382:	d817      	bhi.n	80053b4 <USB_EPStartXfer+0xc20>
 8005384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800538e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <USB_EPStartXfer+0xc10>
 800539a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800539e:	3301      	adds	r3, #1
 80053a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	029b      	lsls	r3, r3, #10
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e044      	b.n	800543e <USB_EPStartXfer+0xcaa>
 80053b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <USB_EPStartXfer+0xc40>
 80053ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053ce:	3b01      	subs	r3, #1
 80053d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053d8:	b29b      	uxth	r3, r3
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e027      	b.n	800543e <USB_EPStartXfer+0xcaa>
 80053ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d11f      	bne.n	800543e <USB_EPStartXfer+0xcaa>
 80053fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005414:	4413      	add	r3, r2
 8005416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800541a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	011a      	lsls	r2, r3, #4
 8005428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800542c:	4413      	add	r3, r2
 800542e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005432:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005438:	b29a      	uxth	r2, r3
 800543a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800543c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800543e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	895b      	ldrh	r3, [r3, #10]
 800544a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800544e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6959      	ldr	r1, [r3, #20]
 800545a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800545e:	b29b      	uxth	r3, r3
 8005460:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005464:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005468:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800546c:	6800      	ldr	r0, [r0, #0]
 800546e:	f001 f907 	bl	8006680 <USB_WritePMA>
          ep->xfer_buff += len;
 8005472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005482:	441a      	add	r2, r3
 8005484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d90f      	bls.n	80054cc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054bc:	1ad2      	subs	r2, r2, r3
 80054be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	621a      	str	r2, [r3, #32]
 80054ca:	e00e      	b.n	80054ea <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80054dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80054ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8295 	beq.w	8005a1e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d16d      	bne.n	80055e0 <USB_EPStartXfer+0xe4c>
 8005504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005524:	4413      	add	r3, r2
 8005526:	66bb      	str	r3, [r7, #104]	; 0x68
 8005528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	011a      	lsls	r2, r3, #4
 8005536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005538:	4413      	add	r3, r2
 800553a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800553e:	667b      	str	r3, [r7, #100]	; 0x64
 8005540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d112      	bne.n	800556e <USB_EPStartXfer+0xdda>
 8005548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005552:	b29a      	uxth	r2, r3
 8005554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29a      	uxth	r2, r3
 8005568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e063      	b.n	8005636 <USB_EPStartXfer+0xea2>
 800556e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005572:	2b3e      	cmp	r3, #62	; 0x3e
 8005574:	d817      	bhi.n	80055a6 <USB_EPStartXfer+0xe12>
 8005576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <USB_EPStartXfer+0xe02>
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005590:	3301      	adds	r3, #1
 8005592:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559a:	b29b      	uxth	r3, r3
 800559c:	029b      	lsls	r3, r3, #10
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	e047      	b.n	8005636 <USB_EPStartXfer+0xea2>
 80055a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <USB_EPStartXfer+0xe32>
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c0:	3b01      	subs	r3, #1
 80055c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e02a      	b.n	8005636 <USB_EPStartXfer+0xea2>
 80055e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d122      	bne.n	8005636 <USB_EPStartXfer+0xea2>
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	673b      	str	r3, [r7, #112]	; 0x70
 80055fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005600:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560a:	b29b      	uxth	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005610:	4413      	add	r3, r2
 8005612:	673b      	str	r3, [r7, #112]	; 0x70
 8005614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	011a      	lsls	r2, r3, #4
 8005622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005624:	4413      	add	r3, r2
 8005626:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800562a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800562c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005630:	b29a      	uxth	r2, r3
 8005632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005634:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	891b      	ldrh	r3, [r3, #8]
 8005642:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6959      	ldr	r1, [r3, #20]
 8005652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005656:	b29b      	uxth	r3, r3
 8005658:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800565c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005660:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005664:	6800      	ldr	r0, [r0, #0]
 8005666:	f001 f80b 	bl	8006680 <USB_WritePMA>
 800566a:	e1d8      	b.n	8005a1e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800566c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d178      	bne.n	800576e <USB_EPStartXfer+0xfda>
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800568a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005698:	b29b      	uxth	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056a0:	4413      	add	r3, r2
 80056a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	011a      	lsls	r2, r3, #4
 80056b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d116      	bne.n	80056f8 <USB_EPStartXfer+0xf64>
 80056ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	e06b      	b.n	80057d0 <USB_EPStartXfer+0x103c>
 80056f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fc:	2b3e      	cmp	r3, #62	; 0x3e
 80056fe:	d818      	bhi.n	8005732 <USB_EPStartXfer+0xf9e>
 8005700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800570a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <USB_EPStartXfer+0xf8c>
 8005716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800571a:	3301      	adds	r3, #1
 800571c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005720:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005724:	b29b      	uxth	r3, r3
 8005726:	029b      	lsls	r3, r3, #10
 8005728:	b29a      	uxth	r2, r3
 800572a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	e04e      	b.n	80057d0 <USB_EPStartXfer+0x103c>
 8005732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800573c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <USB_EPStartXfer+0xfbe>
 8005748:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800574c:	3b01      	subs	r3, #1
 800574e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005752:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005756:	b29b      	uxth	r3, r3
 8005758:	029b      	lsls	r3, r3, #10
 800575a:	b29b      	uxth	r3, r3
 800575c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005764:	b29a      	uxth	r2, r3
 8005766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e030      	b.n	80057d0 <USB_EPStartXfer+0x103c>
 800576e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d128      	bne.n	80057d0 <USB_EPStartXfer+0x103c>
 800577e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800578c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057a2:	4413      	add	r3, r2
 80057a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	011a      	lsls	r2, r3, #4
 80057b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057ba:	4413      	add	r3, r2
 80057bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	891b      	ldrh	r3, [r3, #8]
 80057dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6959      	ldr	r1, [r3, #20]
 80057ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057f6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057fa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057fe:	6800      	ldr	r0, [r0, #0]
 8005800:	f000 ff3e 	bl	8006680 <USB_WritePMA>
          ep->xfer_buff += len;
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005814:	441a      	add	r2, r3
 8005816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6a1a      	ldr	r2, [r3, #32]
 800582e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d90f      	bls.n	800585e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800583e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	621a      	str	r2, [r3, #32]
 800585c:	e00e      	b.n	800587c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2200      	movs	r2, #0
 800587a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800587c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80cc 	beq.w	8005a1e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d178      	bne.n	8005996 <USB_EPStartXfer+0x1202>
 80058a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058c8:	4413      	add	r3, r2
 80058ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	011a      	lsls	r2, r3, #4
 80058dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058e0:	4413      	add	r3, r2
 80058e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d116      	bne.n	8005920 <USB_EPStartXfer+0x118c>
 80058f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058fe:	b29a      	uxth	r2, r3
 8005900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005916:	b29a      	uxth	r2, r3
 8005918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800591c:	801a      	strh	r2, [r3, #0]
 800591e:	e064      	b.n	80059ea <USB_EPStartXfer+0x1256>
 8005920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005924:	2b3e      	cmp	r3, #62	; 0x3e
 8005926:	d818      	bhi.n	800595a <USB_EPStartXfer+0x11c6>
 8005928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <USB_EPStartXfer+0x11b4>
 800593e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005942:	3301      	adds	r3, #1
 8005944:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594c:	b29b      	uxth	r3, r3
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	b29a      	uxth	r2, r3
 8005952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	e047      	b.n	80059ea <USB_EPStartXfer+0x1256>
 800595a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <USB_EPStartXfer+0x11e6>
 8005970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005974:	3b01      	subs	r3, #1
 8005976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800597a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800597e:	b29b      	uxth	r3, r3
 8005980:	029b      	lsls	r3, r3, #10
 8005982:	b29b      	uxth	r3, r3
 8005984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598c:	b29a      	uxth	r2, r3
 800598e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e029      	b.n	80059ea <USB_EPStartXfer+0x1256>
 8005996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d121      	bne.n	80059ea <USB_EPStartXfer+0x1256>
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059bc:	4413      	add	r3, r2
 80059be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	011a      	lsls	r2, r3, #4
 80059d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	895b      	ldrh	r3, [r3, #10]
 80059f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6959      	ldr	r1, [r3, #20]
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a10:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a18:	6800      	ldr	r0, [r0, #0]
 8005a1a:	f000 fe31 	bl	8006680 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a40:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4c:	8013      	strh	r3, [r2, #0]
 8005a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a52:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005a56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a5a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a5e:	8812      	ldrh	r2, [r2, #0]
 8005a60:	f082 0210 	eor.w	r2, r2, #16
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a72:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a76:	8812      	ldrh	r2, [r2, #0]
 8005a78:	f082 0220 	eor.w	r2, r2, #32
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]
 8005ab6:	f000 bc9f 	b.w	80063f8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	7b1b      	ldrb	r3, [r3, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f040 80ae 	bne.w	8005c28 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d917      	bls.n	8005b18 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699a      	ldr	r2, [r3, #24]
 8005b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b08:	1ad2      	subs	r2, r2, r3
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	619a      	str	r2, [r3, #24]
 8005b16:	e00e      	b.n	8005b36 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	011a      	lsls	r2, r3, #4
 8005b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b72:	4413      	add	r3, r2
 8005b74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d116      	bne.n	8005bb2 <USB_EPStartXfer+0x141e>
 8005b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e3e8      	b.n	8006384 <USB_EPStartXfer+0x1bf0>
 8005bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb8:	d818      	bhi.n	8005bec <USB_EPStartXfer+0x1458>
 8005bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <USB_EPStartXfer+0x1446>
 8005bd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005bda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	e3cb      	b.n	8006384 <USB_EPStartXfer+0x1bf0>
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d104      	bne.n	8005c0c <USB_EPStartXfer+0x1478>
 8005c02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c06:	3b01      	subs	r3, #1
 8005c08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	029b      	lsls	r3, r3, #10
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	e3ad      	b.n	8006384 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	78db      	ldrb	r3, [r3, #3]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	f040 8200 	bne.w	800603a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f040 8091 	bne.w	8005d6e <USB_EPStartXfer+0x15da>
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c70:	4413      	add	r3, r2
 8005c72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	011a      	lsls	r2, r3, #4
 8005c84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c88:	4413      	add	r3, r2
 8005c8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d116      	bne.n	8005cd0 <USB_EPStartXfer+0x153c>
 8005ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	e083      	b.n	8005dd8 <USB_EPStartXfer+0x1644>
 8005cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cde:	d820      	bhi.n	8005d22 <USB_EPStartXfer+0x158e>
 8005ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	085b      	lsrs	r3, r3, #1
 8005cee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <USB_EPStartXfer+0x157c>
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e05a      	b.n	8005dd8 <USB_EPStartXfer+0x1644>
 8005d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <USB_EPStartXfer+0x15be>
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	e034      	b.n	8005dd8 <USB_EPStartXfer+0x1644>
 8005d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d12c      	bne.n	8005dd8 <USB_EPStartXfer+0x1644>
 8005d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005da2:	4413      	add	r3, r2
 8005da4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	011a      	lsls	r2, r3, #4
 8005db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ddc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f040 8091 	bne.w	8005f1a <USB_EPStartXfer+0x1786>
 8005df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	011a      	lsls	r2, r3, #4
 8005e30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e34:	4413      	add	r3, r2
 8005e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d116      	bne.n	8005e7c <USB_EPStartXfer+0x16e8>
 8005e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	e07c      	b.n	8005f76 <USB_EPStartXfer+0x17e2>
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b3e      	cmp	r3, #62	; 0x3e
 8005e8a:	d820      	bhi.n	8005ece <USB_EPStartXfer+0x173a>
 8005e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d004      	beq.n	8005ebc <USB_EPStartXfer+0x1728>
 8005eb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ebc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	029b      	lsls	r3, r3, #10
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e053      	b.n	8005f76 <USB_EPStartXfer+0x17e2>
 8005ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <USB_EPStartXfer+0x176a>
 8005ef4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005efe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	029b      	lsls	r3, r3, #10
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e02d      	b.n	8005f76 <USB_EPStartXfer+0x17e2>
 8005f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d125      	bne.n	8005f76 <USB_EPStartXfer+0x17e2>
 8005f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f40:	4413      	add	r3, r2
 8005f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	011a      	lsls	r2, r3, #4
 8005f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f58:	4413      	add	r3, r2
 8005f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 81fe 	beq.w	8006384 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fa8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <USB_EPStartXfer+0x182c>
 8005fb4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10d      	bne.n	8005fdc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fc0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 81db 	bne.w	8006384 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f040 81d4 	bne.w	8006384 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006030:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006034:	b29b      	uxth	r3, r3
 8006036:	8013      	strh	r3, [r2, #0]
 8006038:	e1a4      	b.n	8006384 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800603a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	2b01      	cmp	r3, #1
 8006048:	f040 819a 	bne.w	8006380 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800604c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	429a      	cmp	r2, r3
 8006066:	d917      	bls.n	8006098 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006088:	1ad2      	subs	r2, r2, r3
 800608a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	619a      	str	r2, [r3, #24]
 8006096:	e00e      	b.n	80060b6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d178      	bne.n	80061b8 <USB_EPStartXfer+0x1a24>
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060ea:	4413      	add	r3, r2
 80060ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	011a      	lsls	r2, r3, #4
 80060fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006102:	4413      	add	r3, r2
 8006104:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006108:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d116      	bne.n	8006142 <USB_EPStartXfer+0x19ae>
 8006114:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006120:	b29a      	uxth	r2, r3
 8006122:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e06b      	b.n	800621a <USB_EPStartXfer+0x1a86>
 8006142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006146:	2b3e      	cmp	r3, #62	; 0x3e
 8006148:	d818      	bhi.n	800617c <USB_EPStartXfer+0x19e8>
 800614a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d004      	beq.n	800616a <USB_EPStartXfer+0x19d6>
 8006160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006164:	3301      	adds	r3, #1
 8006166:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800616a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800616e:	b29b      	uxth	r3, r3
 8006170:	029b      	lsls	r3, r3, #10
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	e04e      	b.n	800621a <USB_EPStartXfer+0x1a86>
 800617c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <USB_EPStartXfer+0x1a08>
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006196:	3b01      	subs	r3, #1
 8006198:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800619c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	029b      	lsls	r3, r3, #10
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e030      	b.n	800621a <USB_EPStartXfer+0x1a86>
 80061b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d128      	bne.n	800621a <USB_EPStartXfer+0x1a86>
 80061c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	4413      	add	r3, r2
 80061ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	011a      	lsls	r2, r3, #4
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	4413      	add	r3, r2
 8006206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800620a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800620e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d178      	bne.n	800632a <USB_EPStartXfer+0x1b96>
 8006238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006254:	b29b      	uxth	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800625c:	4413      	add	r3, r2
 800625e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	011a      	lsls	r2, r3, #4
 8006270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006274:	4413      	add	r3, r2
 8006276:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800627a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800627e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d116      	bne.n	80062b4 <USB_EPStartXfer+0x1b20>
 8006286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006292:	b29a      	uxth	r2, r3
 8006294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e067      	b.n	8006384 <USB_EPStartXfer+0x1bf0>
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	2b3e      	cmp	r3, #62	; 0x3e
 80062ba:	d818      	bhi.n	80062ee <USB_EPStartXfer+0x1b5a>
 80062bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c0:	085b      	lsrs	r3, r3, #1
 80062c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <USB_EPStartXfer+0x1b48>
 80062d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062d6:	3301      	adds	r3, #1
 80062d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	029b      	lsls	r3, r3, #10
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	e04a      	b.n	8006384 <USB_EPStartXfer+0x1bf0>
 80062ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <USB_EPStartXfer+0x1b7a>
 8006304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006308:	3b01      	subs	r3, #1
 800630a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800630e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006312:	b29b      	uxth	r3, r3
 8006314:	029b      	lsls	r3, r3, #10
 8006316:	b29b      	uxth	r3, r3
 8006318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e02c      	b.n	8006384 <USB_EPStartXfer+0x1bf0>
 800632a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d124      	bne.n	8006384 <USB_EPStartXfer+0x1bf0>
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	4413      	add	r3, r2
 8006352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	011a      	lsls	r2, r3, #4
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006368:	4413      	add	r3, r2
 800636a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800636e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006376:	b29a      	uxth	r2, r3
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e001      	b.n	8006384 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e03a      	b.n	80063fa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	441a      	add	r2, r3
 80063e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d020      	beq.n	8006458 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642c:	81bb      	strh	r3, [r7, #12]
 800642e:	89bb      	ldrh	r3, [r7, #12]
 8006430:	f083 0310 	eor.w	r3, r3, #16
 8006434:	81bb      	strh	r3, [r7, #12]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	89bb      	ldrh	r3, [r7, #12]
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]
 8006456:	e01f      	b.n	8006498 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	81fb      	strh	r3, [r7, #14]
 8006470:	89fb      	ldrh	r3, [r7, #14]
 8006472:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006476:	81fb      	strh	r3, [r7, #14]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	441a      	add	r2, r3
 8006482:	89fb      	ldrh	r3, [r7, #14]
 8006484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006494:	b29b      	uxth	r3, r3
 8006496:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr

080064a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f040 809d 	bne.w	80065f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d04c      	beq.n	800655a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	823b      	strh	r3, [r7, #16]
 80064ce:	8a3b      	ldrh	r3, [r7, #16]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01b      	beq.n	8006510 <USB_EPClearStall+0x6c>
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ee:	81fb      	strh	r3, [r7, #14]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	89fb      	ldrh	r3, [r7, #14]
 80064fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800650c:	b29b      	uxth	r3, r3
 800650e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	78db      	ldrb	r3, [r3, #3]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d06c      	beq.n	80065f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652e:	81bb      	strh	r3, [r7, #12]
 8006530:	89bb      	ldrh	r3, [r7, #12]
 8006532:	f083 0320 	eor.w	r3, r3, #32
 8006536:	81bb      	strh	r3, [r7, #12]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	89bb      	ldrh	r3, [r7, #12]
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
 8006558:	e04b      	b.n	80065f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	82fb      	strh	r3, [r7, #22]
 8006568:	8afb      	ldrh	r3, [r7, #22]
 800656a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01b      	beq.n	80065aa <USB_EPClearStall+0x106>
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006588:	82bb      	strh	r3, [r7, #20]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	8abb      	ldrh	r3, [r7, #20]
 8006596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c0:	827b      	strh	r3, [r7, #18]
 80065c2:	8a7b      	ldrh	r3, [r7, #18]
 80065c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065c8:	827b      	strh	r3, [r7, #18]
 80065ca:	8a7b      	ldrh	r3, [r7, #18]
 80065cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065d0:	827b      	strh	r3, [r7, #18]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	8a7b      	ldrh	r3, [r7, #18]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d103      	bne.n	8006618 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2280      	movs	r2, #128	; 0x80
 8006614:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800665a:	b29b      	uxth	r3, r3
 800665c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800665e:	68fb      	ldr	r3, [r7, #12]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr

0800666a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006680:	b480      	push	{r7}
 8006682:	b08d      	sub	sp, #52	; 0x34
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	4611      	mov	r1, r2
 800668c:	461a      	mov	r2, r3
 800668e:	460b      	mov	r3, r1
 8006690:	80fb      	strh	r3, [r7, #6]
 8006692:	4613      	mov	r3, r2
 8006694:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006696:	88bb      	ldrh	r3, [r7, #4]
 8006698:	3301      	adds	r3, #1
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	005a      	lsls	r2, r3, #1
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b8:	e01e      	b.n	80066f8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	3301      	adds	r3, #1
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	3302      	adds	r3, #2
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	3302      	adds	r3, #2
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	3301      	adds	r3, #1
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	3b01      	subs	r3, #1
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1dd      	bne.n	80066ba <USB_WritePMA+0x3a>
  }
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	3734      	adds	r7, #52	; 0x34
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr

0800670a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800670a:	b480      	push	{r7}
 800670c:	b08b      	sub	sp, #44	; 0x2c
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	4611      	mov	r1, r2
 8006716:	461a      	mov	r2, r3
 8006718:	460b      	mov	r3, r1
 800671a:	80fb      	strh	r3, [r7, #6]
 800671c:	4613      	mov	r3, r2
 800671e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006720:	88bb      	ldrh	r3, [r7, #4]
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	005a      	lsls	r2, r3, #1
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
 8006742:	e01b      	b.n	800677c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	3302      	adds	r3, #2
 8006750:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3301      	adds	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	0a1b      	lsrs	r3, r3, #8
 8006764:	b2da      	uxtb	r2, r3
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	3301      	adds	r3, #1
 800676e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	3302      	adds	r3, #2
 8006774:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	3b01      	subs	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e0      	bne.n	8006744 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006782:	88bb      	ldrh	r3, [r7, #4]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	b2da      	uxtb	r2, r3
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	701a      	strb	r2, [r3, #0]
  }
}
 800679e:	bf00      	nop
 80067a0:	372c      	adds	r7, #44	; 0x2c
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	4613      	mov	r3, r2
 80067b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067bc:	2302      	movs	r3, #2
 80067be:	e01a      	b.n	80067f6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	79fa      	ldrb	r2, [r7, #7]
 80067ec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f001 fa26 	bl	8007c40 <USBD_LL_Init>

  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d006      	beq.n	8006820 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]
 800681e:	e001      	b.n	8006824 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006820:	2302      	movs	r3, #2
 8006822:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fa51 	bl	8007ce0 <USBD_LL_Start>

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr

0800685c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006868:	2302      	movs	r3, #2
 800686a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00c      	beq.n	8006890 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4611      	mov	r1, r2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	78fa      	ldrb	r2, [r7, #3]
 80068b0:	4611      	mov	r1, r2
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3

  return USBD_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fed7 	bl	8007686 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d016      	beq.n	800692a <USBD_LL_SetupStage+0x6a>
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d81c      	bhi.n	800693a <USBD_LL_SetupStage+0x7a>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <USBD_LL_SetupStage+0x4a>
 8006904:	2b01      	cmp	r3, #1
 8006906:	d008      	beq.n	800691a <USBD_LL_SetupStage+0x5a>
 8006908:	e017      	b.n	800693a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9ca 	bl	8006cac <USBD_StdDevReq>
      break;
 8006918:	e01a      	b.n	8006950 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa2c 	bl	8006d80 <USBD_StdItfReq>
      break;
 8006928:	e012      	b.n	8006950 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fa6c 	bl	8006e10 <USBD_StdEPReq>
      break;
 8006938:	e00a      	b.n	8006950 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006940:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006944:	b2db      	uxtb	r3, r3
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 fa29 	bl	8007da0 <USBD_LL_StallEP>
      break;
 800694e:	bf00      	nop
  }

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	460b      	mov	r3, r1
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006968:	7afb      	ldrb	r3, [r7, #11]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d14b      	bne.n	8006a06 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006974:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800697c:	2b03      	cmp	r3, #3
 800697e:	d134      	bne.n	80069ea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	429a      	cmp	r2, r3
 800698a:	d919      	bls.n	80069c0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	1ad2      	subs	r2, r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d203      	bcs.n	80069ae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	e002      	b.n	80069b4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 ff38 	bl	800782e <USBD_CtlContinueRx>
 80069be:	e038      	b.n	8006a32 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d105      	bne.n	80069e2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 ff35 	bl	8007852 <USBD_CtlSendStatus>
 80069e8:	e023      	b.n	8006a32 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069f0:	2b05      	cmp	r3, #5
 80069f2:	d11e      	bne.n	8006a32 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80069fc:	2100      	movs	r1, #0
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f001 f9ce 	bl	8007da0 <USBD_LL_StallEP>
 8006a04:	e015      	b.n	8006a32 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00d      	beq.n	8006a2e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d108      	bne.n	8006a2e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	7afa      	ldrb	r2, [r7, #11]
 8006a26:	4611      	mov	r1, r2
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	4798      	blx	r3
 8006a2c:	e001      	b.n	8006a32 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e000      	b.n	8006a34 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	460b      	mov	r3, r1
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d17f      	bne.n	8006b50 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3314      	adds	r3, #20
 8006a54:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d15c      	bne.n	8006b1a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d915      	bls.n	8006a98 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fec0 	bl	800780a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2100      	movs	r1, #0
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f001 fa31 	bl	8007ef8 <USBD_LL_PrepareReceive>
 8006a96:	e04e      	b.n	8006b36 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	6912      	ldr	r2, [r2, #16]
 8006aa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aa4:	fb01 f202 	mul.w	r2, r1, r2
 8006aa8:	1a9b      	subs	r3, r3, r2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d11c      	bne.n	8006ae8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d316      	bcc.n	8006ae8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d20f      	bcs.n	8006ae8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2100      	movs	r1, #0
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fe9c 	bl	800780a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ada:	2300      	movs	r3, #0
 8006adc:	2200      	movs	r2, #0
 8006ade:	2100      	movs	r1, #0
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f001 fa09 	bl	8007ef8 <USBD_LL_PrepareReceive>
 8006ae6:	e026      	b.n	8006b36 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d105      	bne.n	8006b0a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f001 f947 	bl	8007da0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 feb0 	bl	8007878 <USBD_CtlReceiveStatus>
 8006b18:	e00d      	b.n	8006b36 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d004      	beq.n	8006b2e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f001 f935 	bl	8007da0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d11d      	bne.n	8006b7c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff fe81 	bl	8006848 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b4e:	e015      	b.n	8006b7c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00d      	beq.n	8006b78 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d108      	bne.n	8006b78 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	7afa      	ldrb	r2, [r7, #11]
 8006b70:	4611      	mov	r1, r2
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	4798      	blx	r3
 8006b76:	e001      	b.n	8006b7c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e000      	b.n	8006b7e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	2200      	movs	r2, #0
 8006b92:	2100      	movs	r1, #0
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f8be 	bl	8007d16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2240      	movs	r2, #64	; 0x40
 8006ba6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	2200      	movs	r2, #0
 8006bae:	2180      	movs	r1, #128	; 0x80
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f8b0 	bl	8007d16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2240      	movs	r2, #64	; 0x40
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6852      	ldr	r2, [r2, #4]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
  }

  return USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	78fa      	ldrb	r2, [r7, #3]
 8006c18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr

08006c26 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr

08006c4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d105      	bne.n	8006c6c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d10b      	bne.n	8006ca2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d005      	beq.n	8006cd2 <USBD_StdDevReq+0x26>
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	d84f      	bhi.n	8006d6a <USBD_StdDevReq+0xbe>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <USBD_StdDevReq+0x36>
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d14b      	bne.n	8006d6a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	4798      	blx	r3
      break;
 8006ce0:	e048      	b.n	8006d74 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b09      	cmp	r3, #9
 8006ce8:	d839      	bhi.n	8006d5e <USBD_StdDevReq+0xb2>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <USBD_StdDevReq+0x44>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d41 	.word	0x08006d41
 8006cf4:	08006d55 	.word	0x08006d55
 8006cf8:	08006d5f 	.word	0x08006d5f
 8006cfc:	08006d4b 	.word	0x08006d4b
 8006d00:	08006d5f 	.word	0x08006d5f
 8006d04:	08006d23 	.word	0x08006d23
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d5f 	.word	0x08006d5f
 8006d10:	08006d37 	.word	0x08006d37
 8006d14:	08006d2d 	.word	0x08006d2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9dc 	bl	80070d8 <USBD_GetDescriptor>
          break;
 8006d20:	e022      	b.n	8006d68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fb3f 	bl	80073a8 <USBD_SetAddress>
          break;
 8006d2a:	e01d      	b.n	8006d68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fb7e 	bl	8007430 <USBD_SetConfig>
          break;
 8006d34:	e018      	b.n	8006d68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fc07 	bl	800754c <USBD_GetConfig>
          break;
 8006d3e:	e013      	b.n	8006d68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fc37 	bl	80075b6 <USBD_GetStatus>
          break;
 8006d48:	e00e      	b.n	8006d68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fc65 	bl	800761c <USBD_SetFeature>
          break;
 8006d52:	e009      	b.n	8006d68 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fc74 	bl	8007644 <USBD_ClrFeature>
          break;
 8006d5c:	e004      	b.n	8006d68 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fccc 	bl	80076fe <USBD_CtlError>
          break;
 8006d66:	bf00      	nop
      }
      break;
 8006d68:	e004      	b.n	8006d74 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fcc6 	bl	80076fe <USBD_CtlError>
      break;
 8006d72:	bf00      	nop
  }

  return ret;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop

08006d80 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d005      	beq.n	8006da6 <USBD_StdItfReq+0x26>
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d82e      	bhi.n	8006dfc <USBD_StdItfReq+0x7c>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <USBD_StdItfReq+0x26>
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d12a      	bne.n	8006dfc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	3b01      	subs	r3, #1
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d81d      	bhi.n	8006dee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	889b      	ldrh	r3, [r3, #4]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d813      	bhi.n	8006de4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d110      	bne.n	8006df8 <USBD_StdItfReq+0x78>
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10d      	bne.n	8006df8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fd38 	bl	8007852 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006de2:	e009      	b.n	8006df8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fc89 	bl	80076fe <USBD_CtlError>
          break;
 8006dec:	e004      	b.n	8006df8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fc84 	bl	80076fe <USBD_CtlError>
          break;
 8006df6:	e000      	b.n	8006dfa <USBD_StdItfReq+0x7a>
          break;
 8006df8:	bf00      	nop
      }
      break;
 8006dfa:	e004      	b.n	8006e06 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fc7d 	bl	80076fe <USBD_CtlError>
      break;
 8006e04:	bf00      	nop
  }

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	889b      	ldrh	r3, [r3, #4]
 8006e22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d007      	beq.n	8006e40 <USBD_StdEPReq+0x30>
 8006e30:	2b40      	cmp	r3, #64	; 0x40
 8006e32:	f200 8146 	bhi.w	80070c2 <USBD_StdEPReq+0x2b2>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <USBD_StdEPReq+0x40>
 8006e3a:	2b20      	cmp	r3, #32
 8006e3c:	f040 8141 	bne.w	80070c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
      break;
 8006e4e:	e13d      	b.n	80070cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d10a      	bne.n	8006e72 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	e12d      	b.n	80070ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d007      	beq.n	8006e8a <USBD_StdEPReq+0x7a>
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	f300 811b 	bgt.w	80070b6 <USBD_StdEPReq+0x2a6>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d072      	beq.n	8006f6a <USBD_StdEPReq+0x15a>
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d03a      	beq.n	8006efe <USBD_StdEPReq+0xee>
 8006e88:	e115      	b.n	80070b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d002      	beq.n	8006e9a <USBD_StdEPReq+0x8a>
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d015      	beq.n	8006ec4 <USBD_StdEPReq+0xb4>
 8006e98:	e02b      	b.n	8006ef2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00c      	beq.n	8006eba <USBD_StdEPReq+0xaa>
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b80      	cmp	r3, #128	; 0x80
 8006ea4:	d009      	beq.n	8006eba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 ff78 	bl	8007da0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006eb0:	2180      	movs	r1, #128	; 0x80
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 ff74 	bl	8007da0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006eb8:	e020      	b.n	8006efc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fc1e 	bl	80076fe <USBD_CtlError>
              break;
 8006ec2:	e01b      	b.n	8006efc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	885b      	ldrh	r3, [r3, #2]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10e      	bne.n	8006eea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <USBD_StdEPReq+0xda>
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b80      	cmp	r3, #128	; 0x80
 8006ed6:	d008      	beq.n	8006eea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	88db      	ldrh	r3, [r3, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 ff5b 	bl	8007da0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fcb1 	bl	8007852 <USBD_CtlSendStatus>

              break;
 8006ef0:	e004      	b.n	8006efc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc02 	bl	80076fe <USBD_CtlError>
              break;
 8006efa:	bf00      	nop
          }
          break;
 8006efc:	e0e0      	b.n	80070c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d002      	beq.n	8006f0e <USBD_StdEPReq+0xfe>
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d015      	beq.n	8006f38 <USBD_StdEPReq+0x128>
 8006f0c:	e026      	b.n	8006f5c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00c      	beq.n	8006f2e <USBD_StdEPReq+0x11e>
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b80      	cmp	r3, #128	; 0x80
 8006f18:	d009      	beq.n	8006f2e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 ff3e 	bl	8007da0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 ff3a 	bl	8007da0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f2c:	e01c      	b.n	8006f68 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fbe4 	bl	80076fe <USBD_CtlError>
              break;
 8006f36:	e017      	b.n	8006f68 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d112      	bne.n	8006f66 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 ff45 	bl	8007dde <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fc7c 	bl	8007852 <USBD_CtlSendStatus>
              }
              break;
 8006f5a:	e004      	b.n	8006f66 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fbcd 	bl	80076fe <USBD_CtlError>
              break;
 8006f64:	e000      	b.n	8006f68 <USBD_StdEPReq+0x158>
              break;
 8006f66:	bf00      	nop
          }
          break;
 8006f68:	e0aa      	b.n	80070c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d002      	beq.n	8006f7a <USBD_StdEPReq+0x16a>
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d032      	beq.n	8006fde <USBD_StdEPReq+0x1ce>
 8006f78:	e097      	b.n	80070aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <USBD_StdEPReq+0x180>
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	2b80      	cmp	r3, #128	; 0x80
 8006f84:	d004      	beq.n	8006f90 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fbb8 	bl	80076fe <USBD_CtlError>
                break;
 8006f8e:	e091      	b.n	80070b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	da0b      	bge.n	8006fb0 <USBD_StdEPReq+0x1a0>
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	3310      	adds	r3, #16
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	4413      	add	r3, r2
 8006fac:	3304      	adds	r3, #4
 8006fae:	e00b      	b.n	8006fc8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fbfb 	bl	80077d2 <USBD_CtlSendData>
              break;
 8006fdc:	e06a      	b.n	80070b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	da11      	bge.n	800700a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	f003 020f 	and.w	r2, r3, #15
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	3318      	adds	r3, #24
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d117      	bne.n	8007030 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb7b 	bl	80076fe <USBD_CtlError>
                  break;
 8007008:	e054      	b.n	80070b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	f003 020f 	and.w	r2, r3, #15
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d104      	bne.n	8007030 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fb68 	bl	80076fe <USBD_CtlError>
                  break;
 800702e:	e041      	b.n	80070b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007034:	2b00      	cmp	r3, #0
 8007036:	da0b      	bge.n	8007050 <USBD_StdEPReq+0x240>
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	3310      	adds	r3, #16
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	4413      	add	r3, r2
 800704c:	3304      	adds	r3, #4
 800704e:	e00b      	b.n	8007068 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4413      	add	r3, r2
 8007066:	3304      	adds	r3, #4
 8007068:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <USBD_StdEPReq+0x266>
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d103      	bne.n	800707e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	e00e      	b.n	800709c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 feca 	bl	8007e1c <USBD_LL_IsStallEP>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2201      	movs	r2, #1
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	e002      	b.n	800709c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2202      	movs	r2, #2
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fb95 	bl	80077d2 <USBD_CtlSendData>
              break;
 80070a8:	e004      	b.n	80070b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fb26 	bl	80076fe <USBD_CtlError>
              break;
 80070b2:	bf00      	nop
          }
          break;
 80070b4:	e004      	b.n	80070c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb20 	bl	80076fe <USBD_CtlError>
          break;
 80070be:	bf00      	nop
      }
      break;
 80070c0:	e004      	b.n	80070cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fb1a 	bl	80076fe <USBD_CtlError>
      break;
 80070ca:	bf00      	nop
  }

  return ret;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	885b      	ldrh	r3, [r3, #2]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	2b06      	cmp	r3, #6
 80070fa:	f200 8128 	bhi.w	800734e <USBD_GetDescriptor+0x276>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <USBD_GetDescriptor+0x2c>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007121 	.word	0x08007121
 8007108:	08007139 	.word	0x08007139
 800710c:	08007179 	.word	0x08007179
 8007110:	0800734f 	.word	0x0800734f
 8007114:	0800734f 	.word	0x0800734f
 8007118:	080072ef 	.word	0x080072ef
 800711c:	0800731b 	.word	0x0800731b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	7c12      	ldrb	r2, [r2, #16]
 800712c:	f107 0108 	add.w	r1, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
      break;
 8007136:	e112      	b.n	800735e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	7c1b      	ldrb	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10d      	bne.n	800715c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	f107 0208 	add.w	r2, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3301      	adds	r3, #1
 8007156:	2202      	movs	r2, #2
 8007158:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800715a:	e100      	b.n	800735e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	f107 0208 	add.w	r2, r7, #8
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
 800716c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	2202      	movs	r2, #2
 8007174:	701a      	strb	r2, [r3, #0]
      break;
 8007176:	e0f2      	b.n	800735e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	885b      	ldrh	r3, [r3, #2]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b05      	cmp	r3, #5
 8007180:	f200 80ac 	bhi.w	80072dc <USBD_GetDescriptor+0x204>
 8007184:	a201      	add	r2, pc, #4	; (adr r2, 800718c <USBD_GetDescriptor+0xb4>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	080071a5 	.word	0x080071a5
 8007190:	080071d9 	.word	0x080071d9
 8007194:	0800720d 	.word	0x0800720d
 8007198:	08007241 	.word	0x08007241
 800719c:	08007275 	.word	0x08007275
 80071a0:	080072a9 	.word	0x080072a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7c12      	ldrb	r2, [r2, #16]
 80071bc:	f107 0108 	add.w	r1, r7, #8
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
 80071c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c6:	e091      	b.n	80072ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa97 	bl	80076fe <USBD_CtlError>
            err++;
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	3301      	adds	r3, #1
 80071d4:	72fb      	strb	r3, [r7, #11]
          break;
 80071d6:	e089      	b.n	80072ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00b      	beq.n	80071fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	7c12      	ldrb	r2, [r2, #16]
 80071f0:	f107 0108 	add.w	r1, r7, #8
 80071f4:	4610      	mov	r0, r2
 80071f6:	4798      	blx	r3
 80071f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fa:	e077      	b.n	80072ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa7d 	bl	80076fe <USBD_CtlError>
            err++;
 8007204:	7afb      	ldrb	r3, [r7, #11]
 8007206:	3301      	adds	r3, #1
 8007208:	72fb      	strb	r3, [r7, #11]
          break;
 800720a:	e06f      	b.n	80072ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	7c12      	ldrb	r2, [r2, #16]
 8007224:	f107 0108 	add.w	r1, r7, #8
 8007228:	4610      	mov	r0, r2
 800722a:	4798      	blx	r3
 800722c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800722e:	e05d      	b.n	80072ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa63 	bl	80076fe <USBD_CtlError>
            err++;
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	3301      	adds	r3, #1
 800723c:	72fb      	strb	r3, [r7, #11]
          break;
 800723e:	e055      	b.n	80072ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	7c12      	ldrb	r2, [r2, #16]
 8007258:	f107 0108 	add.w	r1, r7, #8
 800725c:	4610      	mov	r0, r2
 800725e:	4798      	blx	r3
 8007260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007262:	e043      	b.n	80072ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa49 	bl	80076fe <USBD_CtlError>
            err++;
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	3301      	adds	r3, #1
 8007270:	72fb      	strb	r3, [r7, #11]
          break;
 8007272:	e03b      	b.n	80072ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	7c12      	ldrb	r2, [r2, #16]
 800728c:	f107 0108 	add.w	r1, r7, #8
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
 8007294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007296:	e029      	b.n	80072ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa2f 	bl	80076fe <USBD_CtlError>
            err++;
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	3301      	adds	r3, #1
 80072a4:	72fb      	strb	r3, [r7, #11]
          break;
 80072a6:	e021      	b.n	80072ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00b      	beq.n	80072cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	7c12      	ldrb	r2, [r2, #16]
 80072c0:	f107 0108 	add.w	r1, r7, #8
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
 80072c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ca:	e00f      	b.n	80072ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa15 	bl	80076fe <USBD_CtlError>
            err++;
 80072d4:	7afb      	ldrb	r3, [r7, #11]
 80072d6:	3301      	adds	r3, #1
 80072d8:	72fb      	strb	r3, [r7, #11]
          break;
 80072da:	e007      	b.n	80072ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa0d 	bl	80076fe <USBD_CtlError>
          err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80072ea:	e038      	b.n	800735e <USBD_GetDescriptor+0x286>
 80072ec:	e037      	b.n	800735e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	7c1b      	ldrb	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fe:	f107 0208 	add.w	r2, r7, #8
 8007302:	4610      	mov	r0, r2
 8007304:	4798      	blx	r3
 8007306:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007308:	e029      	b.n	800735e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f9f6 	bl	80076fe <USBD_CtlError>
        err++;
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	3301      	adds	r3, #1
 8007316:	72fb      	strb	r3, [r7, #11]
      break;
 8007318:	e021      	b.n	800735e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7c1b      	ldrb	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10d      	bne.n	800733e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	f107 0208 	add.w	r2, r7, #8
 800732e:	4610      	mov	r0, r2
 8007330:	4798      	blx	r3
 8007332:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3301      	adds	r3, #1
 8007338:	2207      	movs	r2, #7
 800733a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800733c:	e00f      	b.n	800735e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f9dc 	bl	80076fe <USBD_CtlError>
        err++;
 8007346:	7afb      	ldrb	r3, [r7, #11]
 8007348:	3301      	adds	r3, #1
 800734a:	72fb      	strb	r3, [r7, #11]
      break;
 800734c:	e007      	b.n	800735e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f9d4 	bl	80076fe <USBD_CtlError>
      err++;
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	3301      	adds	r3, #1
 800735a:	72fb      	strb	r3, [r7, #11]
      break;
 800735c:	bf00      	nop
  }

  if (err != 0U)
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11c      	bne.n	800739e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d011      	beq.n	800738e <USBD_GetDescriptor+0x2b6>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	88db      	ldrh	r3, [r3, #6]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	88da      	ldrh	r2, [r3, #6]
 8007376:	893b      	ldrh	r3, [r7, #8]
 8007378:	4293      	cmp	r3, r2
 800737a:	bf28      	it	cs
 800737c:	4613      	movcs	r3, r2
 800737e:	b29b      	uxth	r3, r3
 8007380:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007382:	893b      	ldrh	r3, [r7, #8]
 8007384:	461a      	mov	r2, r3
 8007386:	68f9      	ldr	r1, [r7, #12]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa22 	bl	80077d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	88db      	ldrh	r3, [r3, #6]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d104      	bne.n	80073a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa5b 	bl	8007852 <USBD_CtlSendStatus>
 800739c:	e000      	b.n	80073a0 <USBD_GetDescriptor+0x2c8>
    return;
 800739e:	bf00      	nop
    }
  }
}
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop

080073a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	889b      	ldrh	r3, [r3, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d130      	bne.n	800741c <USBD_SetAddress+0x74>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	88db      	ldrh	r3, [r3, #6]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d12c      	bne.n	800741c <USBD_SetAddress+0x74>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	885b      	ldrh	r3, [r3, #2]
 80073c6:	2b7f      	cmp	r3, #127	; 0x7f
 80073c8:	d828      	bhi.n	800741c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	885b      	ldrh	r3, [r3, #2]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d104      	bne.n	80073ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f98b 	bl	80076fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e8:	e01d      	b.n	8007426 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	7bfa      	ldrb	r2, [r7, #15]
 80073ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fd3c 	bl	8007e74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fa28 	bl	8007852 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007410:	e009      	b.n	8007426 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741a:	e004      	b.n	8007426 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f96d 	bl	80076fe <USBD_CtlError>
  }
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	885b      	ldrh	r3, [r3, #2]
 800743e:	b2da      	uxtb	r2, r3
 8007440:	4b41      	ldr	r3, [pc, #260]	; (8007548 <USBD_SetConfig+0x118>)
 8007442:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007444:	4b40      	ldr	r3, [pc, #256]	; (8007548 <USBD_SetConfig+0x118>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d904      	bls.n	8007456 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f955 	bl	80076fe <USBD_CtlError>
 8007454:	e075      	b.n	8007542 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745c:	2b02      	cmp	r3, #2
 800745e:	d002      	beq.n	8007466 <USBD_SetConfig+0x36>
 8007460:	2b03      	cmp	r3, #3
 8007462:	d023      	beq.n	80074ac <USBD_SetConfig+0x7c>
 8007464:	e062      	b.n	800752c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007466:	4b38      	ldr	r3, [pc, #224]	; (8007548 <USBD_SetConfig+0x118>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01a      	beq.n	80074a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800746e:	4b36      	ldr	r3, [pc, #216]	; (8007548 <USBD_SetConfig+0x118>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2203      	movs	r2, #3
 800747c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007480:	4b31      	ldr	r3, [pc, #196]	; (8007548 <USBD_SetConfig+0x118>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff f9e8 	bl	800685c <USBD_SetClassConfig>
 800748c:	4603      	mov	r3, r0
 800748e:	2b02      	cmp	r3, #2
 8007490:	d104      	bne.n	800749c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f932 	bl	80076fe <USBD_CtlError>
            return;
 800749a:	e052      	b.n	8007542 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f9d8 	bl	8007852 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074a2:	e04e      	b.n	8007542 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f9d4 	bl	8007852 <USBD_CtlSendStatus>
        break;
 80074aa:	e04a      	b.n	8007542 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074ac:	4b26      	ldr	r3, [pc, #152]	; (8007548 <USBD_SetConfig+0x118>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d112      	bne.n	80074da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80074bc:	4b22      	ldr	r3, [pc, #136]	; (8007548 <USBD_SetConfig+0x118>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80074c6:	4b20      	ldr	r3, [pc, #128]	; (8007548 <USBD_SetConfig+0x118>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff f9e4 	bl	800689a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f9bd 	bl	8007852 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074d8:	e033      	b.n	8007542 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80074da:	4b1b      	ldr	r3, [pc, #108]	; (8007548 <USBD_SetConfig+0x118>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d01d      	beq.n	8007524 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff f9d2 	bl	800689a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80074f6:	4b14      	ldr	r3, [pc, #80]	; (8007548 <USBD_SetConfig+0x118>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007500:	4b11      	ldr	r3, [pc, #68]	; (8007548 <USBD_SetConfig+0x118>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff f9a8 	bl	800685c <USBD_SetClassConfig>
 800750c:	4603      	mov	r3, r0
 800750e:	2b02      	cmp	r3, #2
 8007510:	d104      	bne.n	800751c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f8f2 	bl	80076fe <USBD_CtlError>
            return;
 800751a:	e012      	b.n	8007542 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f998 	bl	8007852 <USBD_CtlSendStatus>
        break;
 8007522:	e00e      	b.n	8007542 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f994 	bl	8007852 <USBD_CtlSendStatus>
        break;
 800752a:	e00a      	b.n	8007542 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f8e5 	bl	80076fe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007534:	4b04      	ldr	r3, [pc, #16]	; (8007548 <USBD_SetConfig+0x118>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff f9ad 	bl	800689a <USBD_ClrClassConfig>
        break;
 8007540:	bf00      	nop
    }
  }
}
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	200005a0 	.word	0x200005a0

0800754c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	88db      	ldrh	r3, [r3, #6]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d004      	beq.n	8007568 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f8cc 	bl	80076fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007566:	e022      	b.n	80075ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756e:	2b02      	cmp	r3, #2
 8007570:	dc02      	bgt.n	8007578 <USBD_GetConfig+0x2c>
 8007572:	2b00      	cmp	r3, #0
 8007574:	dc03      	bgt.n	800757e <USBD_GetConfig+0x32>
 8007576:	e015      	b.n	80075a4 <USBD_GetConfig+0x58>
 8007578:	2b03      	cmp	r3, #3
 800757a:	d00b      	beq.n	8007594 <USBD_GetConfig+0x48>
 800757c:	e012      	b.n	80075a4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3308      	adds	r3, #8
 8007588:	2201      	movs	r2, #1
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f920 	bl	80077d2 <USBD_CtlSendData>
        break;
 8007592:	e00c      	b.n	80075ae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	2201      	movs	r2, #1
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f918 	bl	80077d2 <USBD_CtlSendData>
        break;
 80075a2:	e004      	b.n	80075ae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f8a9 	bl	80076fe <USBD_CtlError>
        break;
 80075ac:	bf00      	nop
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c6:	3b01      	subs	r3, #1
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d81e      	bhi.n	800760a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	88db      	ldrh	r3, [r3, #6]
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d004      	beq.n	80075de <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f891 	bl	80076fe <USBD_CtlError>
        break;
 80075dc:	e01a      	b.n	8007614 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f043 0202 	orr.w	r2, r3, #2
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	330c      	adds	r3, #12
 80075fe:	2202      	movs	r2, #2
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f8e5 	bl	80077d2 <USBD_CtlSendData>
      break;
 8007608:	e004      	b.n	8007614 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f876 	bl	80076fe <USBD_CtlError>
      break;
 8007612:	bf00      	nop
  }
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d106      	bne.n	800763c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f90b 	bl	8007852 <USBD_CtlSendStatus>
  }
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007654:	3b01      	subs	r3, #1
 8007656:	2b02      	cmp	r3, #2
 8007658:	d80b      	bhi.n	8007672 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	885b      	ldrh	r3, [r3, #2]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d10c      	bne.n	800767c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8f1 	bl	8007852 <USBD_CtlSendStatus>
      }
      break;
 8007670:	e004      	b.n	800767c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f842 	bl	80076fe <USBD_CtlError>
      break;
 800767a:	e000      	b.n	800767e <USBD_ClrFeature+0x3a>
      break;
 800767c:	bf00      	nop
  }
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785a      	ldrb	r2, [r3, #1]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	3302      	adds	r3, #2
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	3303      	adds	r3, #3
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4413      	add	r3, r2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	3304      	adds	r3, #4
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	3305      	adds	r3, #5
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	4413      	add	r3, r2
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	3306      	adds	r3, #6
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	3307      	adds	r3, #7
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	80da      	strh	r2, [r3, #6]

}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr

080076fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007708:	2180      	movs	r1, #128	; 0x80
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fb48 	bl	8007da0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007710:	2100      	movs	r1, #0
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fb44 	bl	8007da0 <USBD_LL_StallEP>
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d032      	beq.n	800779c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 f834 	bl	80077a4 <USBD_GetLen>
 800773c:	4603      	mov	r3, r0
 800773e:	3301      	adds	r3, #1
 8007740:	b29b      	uxth	r3, r3
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	75fa      	strb	r2, [r7, #23]
 8007750:	461a      	mov	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	7812      	ldrb	r2, [r2, #0]
 800775a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	75fa      	strb	r2, [r7, #23]
 8007762:	461a      	mov	r2, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4413      	add	r3, r2
 8007768:	2203      	movs	r2, #3
 800776a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800776c:	e012      	b.n	8007794 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	60fa      	str	r2, [r7, #12]
 8007774:	7dfa      	ldrb	r2, [r7, #23]
 8007776:	1c51      	adds	r1, r2, #1
 8007778:	75f9      	strb	r1, [r7, #23]
 800777a:	4611      	mov	r1, r2
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	440a      	add	r2, r1
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	75fa      	strb	r2, [r7, #23]
 800778a:	461a      	mov	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4413      	add	r3, r2
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e8      	bne.n	800776e <USBD_GetString+0x4e>
    }
  }
}
 800779c:	bf00      	nop
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077b0:	e005      	b.n	80077be <USBD_GetLen+0x1a>
  {
    len++;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	3301      	adds	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3301      	adds	r3, #1
 80077bc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f5      	bne.n	80077b2 <USBD_GetLen+0xe>
  }

  return len;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr

080077d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	4613      	mov	r3, r2
 80077de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077e8:	88fa      	ldrh	r2, [r7, #6]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	2100      	movs	r1, #0
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 fb59 	bl	8007eb2 <USBD_LL_Transmit>

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	2100      	movs	r1, #0
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fb47 	bl	8007eb2 <USBD_LL_Transmit>

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	4613      	mov	r3, r2
 800783a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	2100      	movs	r1, #0
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fb58 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2204      	movs	r2, #4
 800785e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007862:	2300      	movs	r3, #0
 8007864:	2200      	movs	r2, #0
 8007866:	2100      	movs	r1, #0
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fb22 	bl	8007eb2 <USBD_LL_Transmit>

  return USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2205      	movs	r2, #5
 8007884:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007888:	2300      	movs	r3, #0
 800788a:	2200      	movs	r2, #0
 800788c:	2100      	movs	r1, #0
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fb32 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	6039      	str	r1, [r7, #0]
 80078aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2212      	movs	r2, #18
 80078b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078b2:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20000080 	.word	0x20000080

080078c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	6039      	str	r1, [r7, #0]
 80078ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2204      	movs	r2, #4
 80078d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078d6:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000094 	.word	0x20000094

080078e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	6039      	str	r1, [r7, #0]
 80078f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d105      	bne.n	8007906 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4907      	ldr	r1, [pc, #28]	; (800791c <USBD_FS_ProductStrDescriptor+0x34>)
 80078fe:	4808      	ldr	r0, [pc, #32]	; (8007920 <USBD_FS_ProductStrDescriptor+0x38>)
 8007900:	f7ff ff0e 	bl	8007720 <USBD_GetString>
 8007904:	e004      	b.n	8007910 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	4904      	ldr	r1, [pc, #16]	; (800791c <USBD_FS_ProductStrDescriptor+0x34>)
 800790a:	4805      	ldr	r0, [pc, #20]	; (8007920 <USBD_FS_ProductStrDescriptor+0x38>)
 800790c:	f7ff ff08 	bl	8007720 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200005a4 	.word	0x200005a4
 8007920:	080080d4 	.word	0x080080d4

08007924 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	6039      	str	r1, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	4904      	ldr	r1, [pc, #16]	; (8007944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007934:	4804      	ldr	r0, [pc, #16]	; (8007948 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007936:	f7ff fef3 	bl	8007720 <USBD_GetString>
  return USBD_StrDesc;
 800793a:	4b02      	ldr	r3, [pc, #8]	; (8007944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200005a4 	.word	0x200005a4
 8007948:	080080f4 	.word	0x080080f4

0800794c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	6039      	str	r1, [r7, #0]
 8007956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	221a      	movs	r2, #26
 800795c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800795e:	f000 f843 	bl	80079e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007962:	4b02      	ldr	r3, [pc, #8]	; (800796c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	20000098 	.word	0x20000098

08007970 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d105      	bne.n	800798e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4907      	ldr	r1, [pc, #28]	; (80079a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007986:	4808      	ldr	r0, [pc, #32]	; (80079a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007988:	f7ff feca 	bl	8007720 <USBD_GetString>
 800798c:	e004      	b.n	8007998 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	4904      	ldr	r1, [pc, #16]	; (80079a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007992:	4805      	ldr	r0, [pc, #20]	; (80079a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007994:	f7ff fec4 	bl	8007720 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007998:	4b02      	ldr	r3, [pc, #8]	; (80079a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	200005a4 	.word	0x200005a4
 80079a8:	08008108 	.word	0x08008108

080079ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	6039      	str	r1, [r7, #0]
 80079b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d105      	bne.n	80079ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	4907      	ldr	r1, [pc, #28]	; (80079e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079c2:	4808      	ldr	r0, [pc, #32]	; (80079e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079c4:	f7ff feac 	bl	8007720 <USBD_GetString>
 80079c8:	e004      	b.n	80079d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4904      	ldr	r1, [pc, #16]	; (80079e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ce:	4805      	ldr	r0, [pc, #20]	; (80079e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079d0:	f7ff fea6 	bl	8007720 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079d4:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	200005a4 	.word	0x200005a4
 80079e4:	0800811c 	.word	0x0800811c

080079e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <Get_SerialNum+0x44>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <Get_SerialNum+0x48>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079fa:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <Get_SerialNum+0x4c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a0e:	2208      	movs	r2, #8
 8007a10:	4909      	ldr	r1, [pc, #36]	; (8007a38 <Get_SerialNum+0x50>)
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f814 	bl	8007a40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a18:	2204      	movs	r2, #4
 8007a1a:	4908      	ldr	r1, [pc, #32]	; (8007a3c <Get_SerialNum+0x54>)
 8007a1c:	68b8      	ldr	r0, [r7, #8]
 8007a1e:	f000 f80f 	bl	8007a40 <IntToUnicode>
  }
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	1ffff7e8 	.word	0x1ffff7e8
 8007a30:	1ffff7ec 	.word	0x1ffff7ec
 8007a34:	1ffff7f0 	.word	0x1ffff7f0
 8007a38:	2000009a 	.word	0x2000009a
 8007a3c:	200000aa 	.word	0x200000aa

08007a40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a52:	2300      	movs	r3, #0
 8007a54:	75fb      	strb	r3, [r7, #23]
 8007a56:	e027      	b.n	8007aa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	0f1b      	lsrs	r3, r3, #28
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d80b      	bhi.n	8007a78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0f1b      	lsrs	r3, r3, #28
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	440b      	add	r3, r1
 8007a70:	3230      	adds	r2, #48	; 0x30
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e00a      	b.n	8007a8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	0f1b      	lsrs	r3, r3, #28
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	4619      	mov	r1, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	440b      	add	r3, r1
 8007a88:	3237      	adds	r2, #55	; 0x37
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	3301      	adds	r3, #1
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	75fb      	strb	r3, [r7, #23]
 8007aa8:	7dfa      	ldrb	r2, [r7, #23]
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d3d3      	bcc.n	8007a58 <IntToUnicode+0x18>
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr

08007abc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a0d      	ldr	r2, [pc, #52]	; (8007b00 <HAL_PCD_MspInit+0x44>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d113      	bne.n	8007af6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ace:	4b0d      	ldr	r3, [pc, #52]	; (8007b04 <HAL_PCD_MspInit+0x48>)
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	4a0c      	ldr	r2, [pc, #48]	; (8007b04 <HAL_PCD_MspInit+0x48>)
 8007ad4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ad8:	61d3      	str	r3, [r2, #28]
 8007ada:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <HAL_PCD_MspInit+0x48>)
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2100      	movs	r1, #0
 8007aea:	2014      	movs	r0, #20
 8007aec:	f7f9 fa7f 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007af0:	2014      	movs	r0, #20
 8007af2:	f7f9 fa98 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40005c00 	.word	0x40005c00
 8007b04:	40021000 	.word	0x40021000

08007b08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	f7fe fece 	bl	80068c0 <USBD_LL_SetupStage>
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	440b      	add	r3, r1
 8007b4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	4619      	mov	r1, r3
 8007b56:	f7fe ff00 	bl	800695a <USBD_LL_DataOutStage>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	440b      	add	r3, r1
 8007b82:	333c      	adds	r3, #60	; 0x3c
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f7fe ff57 	bl	8006a3c <USBD_LL_DataInStage>
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff f867 	bl	8006c78 <USBD_LL_SOF>
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d001      	beq.n	8007bca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bc6:	f7f8 fe3d 	bl	8000844 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bd0:	7bfa      	ldrb	r2, [r7, #15]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff f817 	bl	8006c08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe ffd0 	bl	8006b86 <USBD_LL_Reset>
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff f811 	bl	8006c26 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c0c:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <HAL_PCD_SuspendCallback+0x30>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	4a03      	ldr	r2, [pc, #12]	; (8007c20 <HAL_PCD_SuspendCallback+0x30>)
 8007c12:	f043 0306 	orr.w	r3, r3, #6
 8007c16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	e000ed00 	.word	0xe000ed00

08007c24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff f80b 	bl	8006c4e <USBD_LL_Resume>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c48:	4a23      	ldr	r2, [pc, #140]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a21      	ldr	r2, [pc, #132]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007c58:	4b1f      	ldr	r3, [pc, #124]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c5a:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <USBD_LL_Init+0x9c>)
 8007c5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c5e:	4b1e      	ldr	r3, [pc, #120]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c60:	2208      	movs	r2, #8
 8007c62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c64:	4b1c      	ldr	r3, [pc, #112]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c66:	2202      	movs	r2, #2
 8007c68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c70:	4b19      	ldr	r3, [pc, #100]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c76:	4b18      	ldr	r3, [pc, #96]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c7c:	4816      	ldr	r0, [pc, #88]	; (8007cd8 <USBD_LL_Init+0x98>)
 8007c7e:	f7f9 fba2 	bl	80013c6 <HAL_PCD_Init>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007c88:	f7f8 fddc 	bl	8000844 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c92:	2318      	movs	r3, #24
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	f7fa ffff 	bl	8002c9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ca2:	2358      	movs	r3, #88	; 0x58
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2180      	movs	r1, #128	; 0x80
 8007ca8:	f7fa fff7 	bl	8002c9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cb2:	2398      	movs	r3, #152	; 0x98
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2181      	movs	r1, #129	; 0x81
 8007cb8:	f7fa ffef 	bl	8002c9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cc2:	23d8      	movs	r3, #216	; 0xd8
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	f7fa ffe7 	bl	8002c9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200007a4 	.word	0x200007a4
 8007cdc:	40005c00 	.word	0x40005c00

08007ce0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7f9 fc70 	bl	80015dc <HAL_PCD_Start>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f93c 	bl	8007f80 <USBD_Get_USB_Status>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	4608      	mov	r0, r1
 8007d20:	4611      	mov	r1, r2
 8007d22:	461a      	mov	r2, r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	70fb      	strb	r3, [r7, #3]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70bb      	strb	r3, [r7, #2]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d3e:	78bb      	ldrb	r3, [r7, #2]
 8007d40:	883a      	ldrh	r2, [r7, #0]
 8007d42:	78f9      	ldrb	r1, [r7, #3]
 8007d44:	f7f9 fde8 	bl	8001918 <HAL_PCD_EP_Open>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f916 	bl	8007f80 <USBD_Get_USB_Status>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7f9 fe2f 	bl	80019e4 <HAL_PCD_EP_Close>
 8007d86:	4603      	mov	r3, r0
 8007d88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f8f7 	bl	8007f80 <USBD_Get_USB_Status>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dba:	78fa      	ldrb	r2, [r7, #3]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7f9 fed8 	bl	8001b74 <HAL_PCD_EP_SetStall>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f8d8 	bl	8007f80 <USBD_Get_USB_Status>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7f9 ff19 	bl	8001c34 <HAL_PCD_EP_ClrStall>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 f8b9 	bl	8007f80 <USBD_Get_USB_Status>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	da0c      	bge.n	8007e52 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	e00b      	b.n	8007e6a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e58:	68f9      	ldr	r1, [r7, #12]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	440b      	add	r3, r1
 8007e64:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007e68:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7f9 fd1b 	bl	80018ce <HAL_PCD_SetAddress>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f86e 	bl	8007f80 <USBD_Get_USB_Status>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	72fb      	strb	r3, [r7, #11]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ed4:	893b      	ldrh	r3, [r7, #8]
 8007ed6:	7af9      	ldrb	r1, [r7, #11]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	f7f9 fe08 	bl	8001aee <HAL_PCD_EP_Transmit>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f84b 	bl	8007f80 <USBD_Get_USB_Status>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eee:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	461a      	mov	r2, r3
 8007f04:	460b      	mov	r3, r1
 8007f06:	72fb      	strb	r3, [r7, #11]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	7af9      	ldrb	r1, [r7, #11]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	f7f9 fda8 	bl	8001a74 <HAL_PCD_EP_Receive>
 8007f24:	4603      	mov	r3, r0
 8007f26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f828 	bl	8007f80 <USBD_Get_USB_Status>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f34:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <USBD_static_malloc+0x14>)
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr
 8007f54:	20000a90 	.word	0x20000a90

08007f58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr

08007f80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d817      	bhi.n	8007fc4 <USBD_Get_USB_Status+0x44>
 8007f94:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <USBD_Get_USB_Status+0x1c>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08007fad 	.word	0x08007fad
 8007fa0:	08007fb3 	.word	0x08007fb3
 8007fa4:	08007fb9 	.word	0x08007fb9
 8007fa8:	08007fbf 	.word	0x08007fbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb0:	e00b      	b.n	8007fca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb6:	e008      	b.n	8007fca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbc:	e005      	b.n	8007fca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc2:	e002      	b.n	8007fca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc8:	bf00      	nop
  }
  return usb_status;
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop

08007fd8 <__libc_init_array>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	2600      	movs	r6, #0
 8007fdc:	4d0c      	ldr	r5, [pc, #48]	; (8008010 <__libc_init_array+0x38>)
 8007fde:	4c0d      	ldr	r4, [pc, #52]	; (8008014 <__libc_init_array+0x3c>)
 8007fe0:	1b64      	subs	r4, r4, r5
 8007fe2:	10a4      	asrs	r4, r4, #2
 8007fe4:	42a6      	cmp	r6, r4
 8007fe6:	d109      	bne.n	8007ffc <__libc_init_array+0x24>
 8007fe8:	f000 f838 	bl	800805c <_init>
 8007fec:	2600      	movs	r6, #0
 8007fee:	4d0a      	ldr	r5, [pc, #40]	; (8008018 <__libc_init_array+0x40>)
 8007ff0:	4c0a      	ldr	r4, [pc, #40]	; (800801c <__libc_init_array+0x44>)
 8007ff2:	1b64      	subs	r4, r4, r5
 8007ff4:	10a4      	asrs	r4, r4, #2
 8007ff6:	42a6      	cmp	r6, r4
 8007ff8:	d105      	bne.n	8008006 <__libc_init_array+0x2e>
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008000:	4798      	blx	r3
 8008002:	3601      	adds	r6, #1
 8008004:	e7ee      	b.n	8007fe4 <__libc_init_array+0xc>
 8008006:	f855 3b04 	ldr.w	r3, [r5], #4
 800800a:	4798      	blx	r3
 800800c:	3601      	adds	r6, #1
 800800e:	e7f2      	b.n	8007ff6 <__libc_init_array+0x1e>
 8008010:	08008144 	.word	0x08008144
 8008014:	08008144 	.word	0x08008144
 8008018:	08008144 	.word	0x08008144
 800801c:	08008148 	.word	0x08008148

08008020 <memcpy>:
 8008020:	440a      	add	r2, r1
 8008022:	4291      	cmp	r1, r2
 8008024:	f100 33ff 	add.w	r3, r0, #4294967295
 8008028:	d100      	bne.n	800802c <memcpy+0xc>
 800802a:	4770      	bx	lr
 800802c:	b510      	push	{r4, lr}
 800802e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008032:	4291      	cmp	r1, r2
 8008034:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008038:	d1f9      	bne.n	800802e <memcpy+0xe>
 800803a:	bd10      	pop	{r4, pc}

0800803c <memset>:
 800803c:	4603      	mov	r3, r0
 800803e:	4402      	add	r2, r0
 8008040:	4293      	cmp	r3, r2
 8008042:	d100      	bne.n	8008046 <memset+0xa>
 8008044:	4770      	bx	lr
 8008046:	f803 1b01 	strb.w	r1, [r3], #1
 800804a:	e7f9      	b.n	8008040 <memset+0x4>

0800804c <strcpy>:
 800804c:	4603      	mov	r3, r0
 800804e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008052:	f803 2b01 	strb.w	r2, [r3], #1
 8008056:	2a00      	cmp	r2, #0
 8008058:	d1f9      	bne.n	800804e <strcpy+0x2>
 800805a:	4770      	bx	lr

0800805c <_init>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr

08008068 <_fini>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	bf00      	nop
 800806c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800806e:	bc08      	pop	{r3}
 8008070:	469e      	mov	lr, r3
 8008072:	4770      	bx	lr
