/*
 * PortController.c
 *
 *  Created on: Dec 27, 2022
 *      Author: Nelson
 */

#include "PortController.h"
#include "timers.h"

#define SHIFT_CLOCK GPIO_PIN_0
#define PORT_RESET GPIO_PIN_1
#define LATCH_CLOCK GPIO_PIN_3
#define OUTPUT_ENABLE GPIO_PIN_4
#define OUTPUT_DATA_H GPIO_PIN_5
#define OUTPUT_DATA_L GPIO_PIN_6
#define READY_SIGNAL GPIO_PIN_13

static void set_address(int value);

void Port_Write(char* buffer, int offset, int bytes)
{
	for (int i = offset; i < (offset + bytes); i++)
	{
		set_address(i);
	}
	Port_Reset();
}

void Port_init()
{
	Port_Reset();
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOC, READY_SIGNAL, GPIO_PIN_RESET);
	HAL_Delay(1);
}

void Port_Read(char** pBuffer, int offset, int bytes) {}

void Port_Reset()
{
	HAL_GPIO_WritePin(GPIOB, OUTPUT_ENABLE, GPIO_PIN_SET);
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB, SHIFT_CLOCK | LATCH_CLOCK | PORT_RESET
			| OUTPUT_ENABLE | OUTPUT_DATA_H | OUTPUT_DATA_L, GPIO_PIN_RESET);
}

void Port_HighZ() {}

void Port_AsOutput() {}

static void set_address(int value)
{
	char addressH = ((0xff00 & value) >> 8);
	char addressL = (0xff & value);

	for (int i = 0; i < 8; i++)
	{
		if ((128 & addressH) == 128)
		{
			HAL_GPIO_WritePin(GPIOB, OUTPUT_DATA_H, GPIO_PIN_SET);
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, OUTPUT_DATA_H, GPIO_PIN_RESET);
		}

		if ((128 & addressL) == 128)
		{
			HAL_GPIO_WritePin(GPIOB, OUTPUT_DATA_L, GPIO_PIN_SET);
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, OUTPUT_DATA_L, GPIO_PIN_RESET);
		}

		int j = 0;

		while (j < 2)
		{
			HAL_GPIO_TogglePin(GPIOB, SHIFT_CLOCK);
			delay_us(1);
			j++;
		}

		addressH <<= 1;
		addressL <<= 1;
	}

	int k = 0;

	while (k < 2)
	{
		HAL_GPIO_TogglePin(GPIOB, LATCH_CLOCK);
		delay_us(1);
		k++;
	}
}


